<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2020/07/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2020/07/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1 相关概念"></a>1 相关概念</h4><ul><li>程序(program)：完成特定任务、用某种编程语言编写的一组指令的集合。<ul><li>静态的代码、即没有加载到内存空间。</li></ul></li><li>进程(process)：程序的一次执行过程，或是正在运行的一个程序。<ul><li>进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域。</li><li>动态的过程。</li></ul></li><li>线程(thread)：一个程序内部的一条执行路径。<ul><li>线程可分两种：一种是守护线程，一种是用户线程。</li><li>线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器，线程切换的开销小。</li><li>多线程：同一个进程同一时间并行执行多个线程，多个线程共享同一个进程中的方法区、堆。</li></ul></li><li>并行：多个CPU同时执行多个任务。</li><li>并发：一个CPU(采用时间片)同时执行多个任务。</li></ul><h4 id="2-多线程程序的优点"><a href="#2-多线程程序的优点" class="headerlink" title="2 多线程程序的优点"></a>2 多线程程序的优点</h4><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li><li>提高计算机系统 CPU 的利用率。</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。</li></ol><h4 id="3-创建多线程的四种方式"><a href="#3-创建多线程的四种方式" class="headerlink" title="3 创建多线程的四种方式"></a>3 创建多线程的四种方式</h4><ul><li><p>方式一：继承Thread类</p><ul><li><ol><li><p>创建继承Thread类的子类</p></li><li><p>重写Thread类的run()方法</p></li><li><p>创建Thread类的子类的对象</p></li><li><p>通过对象调用start()</p></li></ol></li></ul></li><li><p>方式二：实现Runnable接口</p><ul><li><ol><li>创建实现Runnable接口的实现类</li><li>实现run()方法</li><li>创建实现类对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol></li></ul></li></ul><blockquote><ul><li><p>相同点</p><ul><li>两种方式都需要重写run()，将线程要执行的逻辑声明在run()中。</li><li>要启动线程，都是调用的Thread类中的start()。</li></ul></li><li><p>优先选择实现Runnable接口的方式</p><ul><li>避免了单继承的局限性</li><li>多个线程可以共享同一个接口实现类 的对象，非常适合多个相同线程来处理同一份资源。</li></ul></li><li><p>常用方法</p><ul><li>start()：启动当前线程，调用当前线程的run()</li><li>run()：通常需要重写，将线程要执行的操作声明在此方法中</li><li>currentThread()：静态方法，返回执行当前代码的线程</li><li>getName()：获取当前线程的名字</li><li>setName()：设置当前线程的名字</li><li>yield()：静态方法，释放当前cpu的执行权</li><li>join()：在线程a中调用线程b的join()，线程a就进入阻塞状态，等待线程b执行完以后，线程a结束阻塞状态继续执行</li><li>stop()：已过时。强制结束当前线程。</li><li>sleep()：静态方法，在指定的时间内，当前线程是阻塞状态</li><li>isAlive()：判断当前线程是否存活</li></ul></li><li><p>优先级</p><ul><li>高优先级的线程有更高的概率抢占cpu的执行权。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。</li><li>MAX_PRIORITY = 10</li><li>MIN_PRIORITY = 1</li><li>NURM_PRIORITY = 5</li><li>getPriority()：获取线程的优先级</li><li>setPriority(int p)：设置线程的优先级</li></ul></li></ul></blockquote><ul><li>方式三(JDK5)：实现Callable接口<ul><li><ol><li>创建实现Callable的实现类</li><li>实现call()方法</li><li>创建实现类对象</li><li>将此对象作为参数传递到FutureTask构造器中，创建FutureTask的对象</li><li>将FutureTask对象作为参数传递到Thread类的构造器中，创建Thread对象</li><li>通过Thread类的对象调用start()</li></ol></li></ul></li></ul><blockquote><p>注：可通过FutureTask对象的get()方法获取call()方法的返回值</p><p>实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大</p><ul><li>call()可以有返回值。</li><li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li><li>Callable是支持泛型的</li></ul></blockquote><ul><li><p>方式四(JDK5)：线程池</p><ul><li><ol><li><p>通过Executors工具类创建指定线程数量的线程池并声明为ExecutorService接口(多态)</p></li><li><p>二选一</p><p>①创建Runnable接口的实现类对象作为参数传递到线程池的execute()方法中</p><p>②创建Callable接口的实现类对象作为参数传递到线程池的submit()方法中</p></li><li><p>关闭线程池</p></li></ol></li></ul></li></ul><blockquote><p>使用线程池的好处</p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没任务时最多保持多长时间后会终止</li></ul></li></ul></blockquote><h4 id="4-线程的生命周期"><a href="#4-线程的生命周期" class="headerlink" title="4 线程的生命周期"></a>4 线程的生命周期</h4><p><img src="/images/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" srcset="/img/loading.gif" alt=""></p><h4 id="5-线程的同步"><a href="#5-线程的同步" class="headerlink" title="5 线程的同步"></a>5 线程的同步</h4><ul><li><p>Java对于多线程的安全问题提供了专业的解决方式：同步机制。</p></li><li><p>同步代码块</p><ul><li><pre><code class="java"><span class="keyword">synchronized</span>(对象){    <span class="comment">//操作共享数据的代码，即为需要被同步的代码</span>}&lt;!--￼<span class="number">0</span>--&gt;</code></pre></li><li><p>同步方法的锁：静态方法(类名.class)、 非静态方法(this)</p></li></ul></li><li><p>代码是否存在线程安全 </p><ul><li>明确哪些代码是多线程运行的代码。</li><li>明确多个线程是否有共享数据。</li><li>明确多线程运行代码中是否有多条语句操作共享数据。</li></ul></li><li><p>释放锁的操作</p><ul><li>当前线程的同步方法、同步代码块 执行结束。</li><li>当前线程在同步代码块、同步方法中遇到 break、return 终止了该代码块、该方法的继续执行。</li><li>当前线程在同步代码块、同步方法中出现了未处理的 Error 或 Exception 导致异常结束。</li><li>当前线程在同步代码块、同步方法中执行了线程对象的 wait() 方法，当前线程暂停，并释放锁。</li></ul></li><li><p>不会释放锁的操作</p><ul><li><p>线程执行同步代码块或同步方法时，程序调用 Thread.sleep()、Thread.yield() 方法暂停当前线程的执行。</p></li><li><p>线程执行同步代码块时，其他线程调用了该线程的 suspend() 方法将该线程挂起，该线程不会释放锁（同步监视器）。</p><blockquote><p>应尽量避免使用 suspend() 和 resume() 来控制线程。</p></blockquote></li></ul></li><li><p>线程的死锁问题</p><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。</li><li>解决方法<ul><li>专门的算法</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul></li></ul></li><li><p>Lock(JDK5)：通过显式定义同步锁Lock对象来实现同步。</p><ul><li><p>java.util.concurrent.locks.Lock 接口是控制多个线程对共享资源进行访问的工具。 锁提供了对共享资源的独占访问，每次只能有一个线程对 Lock 对象加锁，线程开始访问共享资源之前应先获得 Lock 对象 。</p></li><li><p>ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义， 在实现线程安全的控制中，比较常用的是 ReentrantLock 可以显式加锁、释放锁 。</p></li><li><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReenTrantLock();    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>{        lock.lock();        <span class="keyword">try</span>{            <span class="comment">//保证线程安全的代码</span>        }        <span class="keyword">finally</span>{            lock.unlock();        }    }}</code></pre></li></ul></li><li><p>synchronized与 Lock 的对比</p><ul><li>Lock 是显式锁（手动开启和关闭锁）， synchronized 是隐式锁，出了作用域自动释放</li><li>Lock 只有代码块锁， synchronized 有代码块锁和方法锁</li><li>使用 Lock 锁， JVM 将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li><li>考虑使用的顺序：Lock→同步代码块→同步方法</li></ul></li></ul><h4 id="6-线程的通信"><a href="#6-线程的通信" class="headerlink" title="6 线程的通信"></a>6 线程的通信</h4><ul><li><p>wait() 与 notify()、notifyAll()</p><ul><li>wait()：令当前线程挂起并放弃 CPU 、 同步资源并等待， 使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用 notify() 或 notifyAll() 方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。</li><li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者。</li><li>notifyAll()：唤醒正在排队等待资源的所有线程。</li></ul></li><li><p>这三个方法只有在 synchronized 方法或 synchronized 代码块中才能使用，否则会报java.lang.IllegalMonitorStateException 异常。</p></li><li><p>因为这三个方法必须有锁对象调用，而任意对象都可以作为 synchronized 的同步锁，因此这三个方法只能在 Object 类中声明 。</p></li><li><p>sleep() 和 wait()</p><ul><li>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li><li>不同点：<ul><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()。</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中。</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每天的代码记录</title>
    <link href="/2020/06/21/DailyCode/"/>
    <url>/2020/06/21/DailyCode/</url>
    
    <content type="html"><![CDATA[<h2 id="DailyCode"><a href="#DailyCode" class="headerlink" title="DailyCode"></a>DailyCode</h2><h3 id="Day02-0620"><a href="#Day02-0620" class="headerlink" title="Day02-0620"></a>Day02-0620</h3><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">1. 三目运算符</span><span class="hljs-comment">2. if-else语句</span><span class="hljs-comment">3. 使用Scanner类进行输入</span><span class="hljs-comment">4. Math.random() 产生随机数</span><span class="hljs-comment">5. str1.equals(str2) 字符串比较</span><span class="hljs-comment">6. switch-case语句</span><span class="hljs-comment">*/</span><span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DailyTest</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<span class="hljs-comment">// 三元运算符判断三个数中最大的</span><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">12</span>, num2 = <span class="hljs-number">21</span>, num3 = <span class="hljs-number">26</span>;<span class="hljs-keyword">int</span> maxNum = (num1 &gt; num2)? num1 : num2;maxNum = (maxNum &gt; num3)? maxNum : num3;System.out.println(<span class="hljs-string">"num1 = 12, num2 = 21, num3 = 26, maxNum = "</span> + maxNum);<span class="hljs-comment">// 从控制台获取变量，Scanner类</span>Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">// 整型输入</span>System.out.print(<span class="hljs-string">"input three int: "</span>);num1 = scan.nextInt();num2 = scan.nextInt();num3 = scan.nextInt();<span class="hljs-comment">// System.out.println(num3 + '&gt;' + num1 + '&gt;' + num2);</span><span class="hljs-comment">// if-else 语句从小到大三个数排序</span><span class="hljs-keyword">if</span>(num1 &gt; num2)&#123;<span class="hljs-keyword">if</span>(num3 &gt; num1)&#123;System.out.println(num3 + <span class="hljs-string">"&gt;"</span> + num1 + <span class="hljs-string">"&gt;"</span> + num2);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &gt; num2) &#123;System.out.println(num1 + <span class="hljs-string">"&gt;"</span> + num3 + <span class="hljs-string">"&gt;"</span> + num2);&#125;<span class="hljs-keyword">else</span>&#123;System.out.println(num1 + <span class="hljs-string">"&gt;"</span> + num2 + <span class="hljs-string">"&gt;"</span> + num3);&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span>(num3 &gt; num2) &#123;System.out.println(num3 + <span class="hljs-string">"&gt;"</span> + num2 + <span class="hljs-string">"&gt;"</span> + num1);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &lt; num1)&#123;System.out.println(num2 + <span class="hljs-string">"&gt;"</span> + num1 + <span class="hljs-string">"&gt;"</span> + num3);&#125;<span class="hljs-keyword">else</span>&#123;System.out.println(num2 + <span class="hljs-string">"&gt;"</span> + num3 + <span class="hljs-string">"&gt;"</span> + num1);&#125;&#125;<span class="hljs-comment">// 浮点型输入</span>System.out.print(<span class="hljs-string">"input a double: "</span>);<span class="hljs-keyword">double</span> num5 = scan.nextDouble();System.out.println(num5);<span class="hljs-comment">// 布尔型输入</span>System.out.print(<span class="hljs-string">"input a boolean: "</span>);<span class="hljs-keyword">boolean</span> trueorfalse = scan.nextBoolean();System.out.println(trueorfalse);<span class="hljs-comment">// 字符串输入</span>System.out.print(<span class="hljs-string">"input a String: "</span>);String str = scan.next();System.out.println(str);<span class="hljs-comment">// 生成随机数</span><span class="hljs-keyword">int</span> value = (<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">90</span> + <span class="hljs-number">10</span>);<span class="hljs-comment">// [0.0, 1.0) --&gt; [0.0, 90.0) --&gt; [10.0, 100.0) --&gt; [10, 99]</span>System.out.println(<span class="hljs-string">"random value = "</span> + value);<span class="hljs-comment">// switch-case 前面随机数，若其大于60则输出及格，否则不及格</span><span class="hljs-keyword">switch</span>(value / <span class="hljs-number">60</span>)&#123;<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:System.out.println(<span class="hljs-string">"不及格"</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:System.out.println(<span class="hljs-string">"及格"</span>);<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">//switch-case 从键盘输入年月日，输出该日期为当年第几天</span>System.out.print(<span class="hljs-string">"which year："</span>);<span class="hljs-keyword">int</span> year = scan.nextInt();System.out.print(<span class="hljs-string">"which month："</span>);<span class="hljs-keyword">int</span> month = scan.nextInt();System.out.print(<span class="hljs-string">"which day："</span>);<span class="hljs-keyword">int</span> day = scan.nextInt();<span class="hljs-keyword">int</span> daySum = <span class="hljs-number">0</span>;<span class="hljs-keyword">switch</span>(month)&#123;<span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:daySum += <span class="hljs-number">31</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:daySum += <span class="hljs-number">30</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:daySum += <span class="hljs-number">31</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:daySum += <span class="hljs-number">30</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:daySum += <span class="hljs-number">31</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:daySum += <span class="hljs-number">31</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:daySum += <span class="hljs-number">30</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:daySum += <span class="hljs-number">31</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:daySum += <span class="hljs-number">30</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:daySum += <span class="hljs-number">31</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-keyword">if</span> (year%<span class="hljs-number">400</span> == <span class="hljs-number">0</span> || (year%<span class="hljs-number">100</span> != <span class="hljs-number">0</span> &amp;&amp; year%<span class="hljs-number">4</span> == <span class="hljs-number">0</span>)) &#123;daySum += <span class="hljs-number">29</span>;&#125;<span class="hljs-keyword">else</span>&#123;daySum += <span class="hljs-number">28</span>;&#125;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:daySum += day;System.out.println(year+<span class="hljs-string">"/"</span>+month+<span class="hljs-string">"/"</span>+day+<span class="hljs-string">" is No."</span>+daySum+<span class="hljs-string">" day in this year."</span>);&#125;&#125;&#125;</code></pre><h3 id="Day03-0621"><a href="#Day03-0621" class="headerlink" title="Day03-0621"></a>Day03-0621</h3><h4 id="DailyCode-1"><a href="#DailyCode-1" class="headerlink" title="DailyCode"></a>DailyCode</h4><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">1. for循环</span><span class="hljs-comment">2. while循环</span><span class="hljs-comment">3. do-while循环</span><span class="hljs-comment">4. 循环嵌套</span><span class="hljs-comment">5. 输出给定范围内的质数</span><span class="hljs-comment">6. 开方 Math.sqrt() 返回double</span><span class="hljs-comment">6. 时间戳 System.currentTimeMillis() 返回long</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DailyCode</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<span class="hljs-comment">// 三位数的水仙花数</span>System.out.println(<span class="hljs-string">"三位数的水仙花数"</span>);<span class="hljs-keyword">int</span> bai = <span class="hljs-number">0</span>, shi = <span class="hljs-number">0</span>, ge = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">1000</span>; i++ ) &#123;bai = i / <span class="hljs-number">100</span>;shi = (i - <span class="hljs-number">100</span>*bai) / <span class="hljs-number">10</span>;ge = (i - <span class="hljs-number">100</span>*bai - <span class="hljs-number">10</span>*shi);<span class="hljs-keyword">if</span> (i == bai*bai*bai + shi*shi*shi + ge*ge*ge) &#123;System.out.println(i);&#125;&#125;        <span class="hljs-comment">// 使用label跳出外层循环</span>label: <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123; <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<span class="hljs-keyword">break</span> label;&#125; &#125;        <span class="hljs-comment">// 10w以内的质数</span>System.out.println(<span class="hljs-string">"十万以内的质数"</span>);        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-keyword">boolean</span> isPrime = <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">100000</span>; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= Math.sqrt(i); j++) &#123;<span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;isPrime = <span class="hljs-keyword">false</span>;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;<span class="hljs-keyword">if</span> (isPrime) &#123;                    <span class="hljs-comment">//System.out.println("获取质数：" + i);</span>count++;&#125;isPrime = <span class="hljs-keyword">true</span>;        &#125;<span class="hljs-keyword">long</span> end = System.currentTimeMillis();System.out.println(<span class="hljs-string">"质数个数："</span> + count);System.out.println(<span class="hljs-string">"花费时间："</span> + (end - start));&#125;&#125;</code></pre><h4 id="阶段项目1：家庭收支系统"><a href="#阶段项目1：家庭收支系统" class="headerlink" title="阶段项目1：家庭收支系统"></a>阶段项目1：家庭收支系统</h4><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">家庭收支系统的项目</span><span class="hljs-comment">不足：</span><span class="hljs-comment">1. 除了主界面的服务选项，其他都未做异常处理。</span><span class="hljs-comment">2. 不能存储数据到硬盘。</span><span class="hljs-comment">3. 还只是面向过程的编程。</span><span class="hljs-comment">4. 之后还可以添加增删记录的功能，但是目前只是用字符串存储，学习后面的内容应该可以用更好的方式存储数据。</span><span class="hljs-comment">*/</span><span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FamilyAccount</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//记录收支的次数</span><span class="hljs-keyword">int</span> sumAccount = <span class="hljs-number">0</span>; <span class="hljs-comment">//总金额</span><span class="hljs-keyword">int</span> money = <span class="hljs-number">0</span>; <span class="hljs-comment">//用以接收一笔收支的具体金额</span>String explanation = <span class="hljs-string">""</span>; <span class="hljs-comment">//用以接收一笔收支的说明</span>String detail = <span class="hljs-string">""</span>; <span class="hljs-comment">//总的收支明细</span>String isExit = <span class="hljs-string">""</span>; <span class="hljs-comment">//用以接收退出确认判断</span>String option = <span class="hljs-string">""</span>； <span class="hljs-comment">// 用以接收主界面选项</span><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;System.out.println(<span class="hljs-string">"----------家庭收支系统----------"</span>);System.out.println(<span class="hljs-string">"          1 收支明细"</span>);System.out.println(<span class="hljs-string">"          2 登记收入"</span>);System.out.println(<span class="hljs-string">"          3 登记支出"</span>);System.out.println(<span class="hljs-string">"          4 退   出"</span>);System.out.println(<span class="hljs-string">"--------------------------------"</span>);System.out.print(<span class="hljs-string">"请选择所需要的服务:"</span>);option = scan.next();<span class="hljs-keyword">while</span>(!(option.equals(<span class="hljs-string">"1"</span>) || option.equals(<span class="hljs-string">"2"</span>) || option.equals(<span class="hljs-string">"3"</span>) || option.equals(<span class="hljs-string">"4"</span>))) &#123;System.out.print(<span class="hljs-string">"输入不合规，请重新输入:"</span>);option = scan.next();&#125;<span class="hljs-keyword">switch</span>(option)&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">"1"</span>:System.out.println(<span class="hljs-string">"---------------收支明细---------------"</span>);System.out.println(<span class="hljs-string">"序号\t当前金额\t收支金额\t说明"</span>);System.out.println(detail);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">"2"</span>:System.out.println(<span class="hljs-string">"----------登记收入----------"</span>);System.out.print(<span class="hljs-string">"请输入金额:"</span>);money = scan.nextInt();System.out.print(<span class="hljs-string">"请输入说明:"</span>);explanation = scan.next();count++;sumAccount += money;detail += (count + <span class="hljs-string">"\t"</span> + sumAccount + <span class="hljs-string">"\t\t+"</span> + money + <span class="hljs-string">"\t\t"</span> + explanation + <span class="hljs-string">"\n"</span>);System.out.println(<span class="hljs-string">"----------登记成功----------\n"</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">"3"</span>:System.out.println(<span class="hljs-string">"----------登记支出----------"</span>);System.out.print(<span class="hljs-string">"请输入金额:"</span>);money = scan.nextInt();System.out.print(<span class="hljs-string">"请输入说明:"</span>);explanation = scan.next();count++;sumAccount -= money;detail += (count + <span class="hljs-string">"\t"</span> + sumAccount + <span class="hljs-string">"\t\t-"</span> + money + <span class="hljs-string">"\t\t"</span> + explanation + <span class="hljs-string">"\n"</span>);System.out.println(<span class="hljs-string">"----------登记成功----------\n"</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">"4"</span>:System.out.print(<span class="hljs-string">"请输入y确认退出:"</span>);isExit = scan.next();isExit = isExit.toLowerCase();<span class="hljs-keyword">if</span> (isExit.equals(<span class="hljs-string">"y"</span>)) &#123;<span class="hljs-keyword">return</span>;&#125;&#125;&#125;&#125;&#125;</code></pre><h3 id="Day04-0622"><a href="#Day04-0622" class="headerlink" title="Day04-0622"></a>Day04-0622</h3><h4 id="DailyCode-2"><a href="#DailyCode-2" class="headerlink" title="DailyCode"></a>DailyCode</h4><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">/*</span><span class="hljs-comment"> * 1. 静态初始化</span><span class="hljs-comment"> * 2. 动态初始化</span><span class="hljs-comment"> * 3. 数组长度 arr.length</span><span class="hljs-comment"> * 4. 二分法查找</span><span class="hljs-comment"> * 5. Arrays常用工具类(以整型为例)</span><span class="hljs-comment"> * - boolean equals(int[] a, int[] b)</span><span class="hljs-comment"> * - String toString(int[] a)</span><span class="hljs-comment"> * - void fill(int[] a, int val)</span><span class="hljs-comment"> * - void sort(int[] a)</span><span class="hljs-comment"> * - int binarySearch(int[] a, int key)</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DailyCode</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 一维数组的静态初始化</span><span class="hljs-keyword">int</span>[] arr11 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<span class="hljs-comment">// int[] arr11 = &#123; 0, 1, 2, 3 &#125;;</span><span class="hljs-comment">// 二维数组的静态初始化</span><span class="hljs-keyword">int</span>[][] arr12 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">0</span> &#125; &#125;;<span class="hljs-comment">// 一维数组的动态初始化</span>String[] arr21 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">4</span>];arr21[<span class="hljs-number">0</span>] = <span class="hljs-string">"第一个数"</span>;arr21[<span class="hljs-number">1</span>] = <span class="hljs-string">"第二个数"</span>;<span class="hljs-comment">// 二维数组的动态初始化1</span>String[][] arr22 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<span class="hljs-comment">// 二维数组的动态初始化2</span>String[][] arr23 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][];<span class="hljs-comment">// 数组长度</span>System.out.println(arr11.length);<span class="hljs-comment">// 数组名存储的是地址</span>System.out.println(arr11);System.out.println(arr22);<span class="hljs-comment">// 遍历二维数组</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr12.length; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr12[i].length; j++) &#123;System.out.print(arr12[i][j] + <span class="hljs-string">"\t"</span>);&#125;System.out.println();&#125;<span class="hljs-comment">// 二分法查找，要求数组有序</span>Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-keyword">int</span>[] binarySearch = &#123;-<span class="hljs-number">11</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">15</span>&#125;;System.out.print(<span class="hljs-string">"输入要查找的数字:"</span>);<span class="hljs-keyword">int</span> value = scan.nextInt();<span class="hljs-keyword">boolean</span> inArray = <span class="hljs-keyword">false</span>;<span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> end = binarySearch.length - <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(head &lt;= end) &#123;<span class="hljs-keyword">int</span> middle = (head + end) / <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span>(binarySearch[middle] == value) &#123;inArray = <span class="hljs-keyword">true</span>;System.out.println(<span class="hljs-string">"要查找的数字下标为："</span> + middle );<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(binarySearch[middle] &gt; value) &#123;end = middle - <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span> &#123;head = middle + <span class="hljs-number">1</span>;&#125;&#125;<span class="hljs-keyword">if</span>(!inArray) &#123;System.out.println(<span class="hljs-string">"未找到该数字"</span>);&#125;<span class="hljs-comment">// Arrays常用工具类</span><span class="hljs-comment">// 比较两个数组是否相同</span>String[] arr31 = &#123;<span class="hljs-string">"a"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"b"</span>&#125;;String[] arr32 = &#123;<span class="hljs-string">"a"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"b"</span>&#125;;String[] arr33 = &#123;<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>&#125;;System.out.println(Arrays.equals(arr31, arr32));System.out.println(Arrays.equals(arr31, arr33));<span class="hljs-comment">// 将数组转为字符串</span>System.out.println(Arrays.toString(arr33));<span class="hljs-keyword">int</span>[] arr34 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">// 排序（快排）</span>Arrays.sort(arr34);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr34.length; i++) &#123;System.out.print(arr34[i] + <span class="hljs-string">"\t"</span>);&#125;System.out.println();<span class="hljs-comment">// 二分法查找</span>System.out.println(<span class="hljs-string">"查找的数字下标为："</span> + Arrays.binarySearch(arr34, -<span class="hljs-number">1</span>));<span class="hljs-comment">// 指定填充</span>Arrays.fill(arr34, <span class="hljs-number">9</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr34.length; i++) &#123;System.out.print(arr34[i] + <span class="hljs-string">"\t"</span>);&#125;&#125;&#125;</code></pre><h4 id="YangHuiTriangle"><a href="#YangHuiTriangle" class="headerlink" title="YangHuiTriangle"></a>YangHuiTriangle</h4><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 利用二位数组输出10行杨辉三角形</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YangHuiTriangle</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][];<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[i+<span class="hljs-number">1</span>];arr[i][<span class="hljs-number">0</span>] = arr[i][i] = <span class="hljs-number">1</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; arr[i].length-<span class="hljs-number">1</span>; j++) &#123;arr[i][j] = arr[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + arr[i-<span class="hljs-number">1</span>][j];&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i+<span class="hljs-number">1</span>; j++) &#123;System.out.print(arr[i][j]+<span class="hljs-string">"\t"</span>);&#125;System.out.println();&#125;&#125;&#125;</code></pre><h4 id="HelixSeq"><a href="#HelixSeq" class="headerlink" title="HelixSeq"></a>HelixSeq</h4><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">/*</span><span class="hljs-comment"> * 输入整型数字，输出回形数，如</span><span class="hljs-comment"> * 输入 4</span><span class="hljs-comment"> * 输出 </span><span class="hljs-comment"> * 1234</span><span class="hljs-comment"> * 1213145</span><span class="hljs-comment"> * 1116156</span><span class="hljs-comment"> * 10987</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * 1. 最大数值是长度的平方</span><span class="hljs-comment"> * 2. 每次都是按照右下左上右...的顺序</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelixSeq</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);System.out.print(<span class="hljs-string">"输入一个整型："</span>);<span class="hljs-keyword">int</span> n = scan.nextInt();<span class="hljs-keyword">int</span> len = n*n; <span class="hljs-comment">// 总长度</span><span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; <span class="hljs-comment">// 控制方向，1234分别对应右下左上</span><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>; <span class="hljs-comment">// 相当于坐标 x↓ y→，用于填数</span><span class="hljs-comment">// i作为填入的数，注意从1开始</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i &lt;= len; i++) &#123;<span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">if</span>(y &lt; n &amp;&amp; arr[x][y] == <span class="hljs-number">0</span> ) &#123;arr[x][y++] = i; <span class="hljs-comment">// 向右填数，每次填一个y+1</span>&#125;<span class="hljs-keyword">else</span> &#123;k = <span class="hljs-number">2</span>; <span class="hljs-comment">// 填到最右边的数时调整方向向下</span>i--; <span class="hljs-comment">// 本次循环没有填任何数只是调整了方向，所以i-1</span>x++; <span class="hljs-comment">// 下一次填数从下一行开始</span>y--; <span class="hljs-comment">// 上一次填到最右边时也自增了，y-1避免索引越界</span>&#125;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">2</span>) &#123;<span class="hljs-keyword">if</span>(x &lt; n &amp;&amp; arr[x][y] == <span class="hljs-number">0</span>) &#123;arr[x++][y] = i;&#125;<span class="hljs-keyword">else</span> &#123;k = <span class="hljs-number">3</span>;i--;x--;y--;&#125;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == <span class="hljs-number">3</span>)&#123;<span class="hljs-keyword">if</span>(y &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[x][y] == <span class="hljs-number">0</span>) &#123;arr[x][y--] = i;&#125;<span class="hljs-keyword">else</span> &#123;k = <span class="hljs-number">4</span>;i--;x--;y++;&#125;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">4</span>) &#123;<span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[x][y] == <span class="hljs-number">0</span>) &#123;arr[x--][y] = i;&#125;<span class="hljs-keyword">else</span> &#123;k = <span class="hljs-number">1</span>;i--;x++;y++;&#125;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;System.out.print(arr[i][j]+<span class="hljs-string">"\t"</span>);&#125;System.out.println();&#125;&#125;&#125;</code></pre><h4 id="BubbleSort"><a href="#BubbleSort" class="headerlink" title="BubbleSort"></a>BubbleSort</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">20</span>];<span class="hljs-comment">// 生成20个随机数并填入到数组中</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;arr[i] = (<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">100</span>) - <span class="hljs-number">50</span>;System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);&#125;System.out.println();<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<span class="hljs-keyword">if</span>(arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<span class="hljs-keyword">int</span> temp = arr[j];arr[j] = arr[j + <span class="hljs-number">1</span>];arr[j + <span class="hljs-number">1</span>] = temp;&#125;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);&#125;&#125;&#125;</code></pre><h3 id="Day05-0623"><a href="#Day05-0623" class="headerlink" title="Day05-0623"></a>Day05-0623</h3><h4 id="DailyCode-3"><a href="#DailyCode-3" class="headerlink" title="DailyCode"></a>DailyCode</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DailyCode05</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Person p1 = <span class="hljs-keyword">new</span> Person();p1.isMale = <span class="hljs-keyword">true</span>;p1.name = <span class="hljs-string">"lnzh"</span>;p1.eat();p1.sleep();p1.speak(<span class="hljs-string">"Chinese"</span>);&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<span class="hljs-comment">// 属性</span>String name;<span class="hljs-keyword">int</span> age = <span class="hljs-number">1</span>;<span class="hljs-keyword">boolean</span> isMale;<span class="hljs-comment">// 方法</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"Person can eat!"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"Person can sleep!"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">(String language)</span> </span>&#123;System.out.println(<span class="hljs-string">"Person can speak "</span> + language);&#125;&#125;</code></pre><h4 id="StuTest"><a href="#StuTest" class="headerlink" title="StuTest"></a>StuTest</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用于测试Student类</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh Email:ln_zh@qq.com</span><span class="hljs-comment"> * <span class="hljs-doctag">@version</span></span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 23, 2020 4:31:44 PM</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StuTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 声明一个测试者对象</span>StuTest t1 = <span class="hljs-keyword">new</span> StuTest();<span class="hljs-comment">// 声明Student类型的数组</span>Student[] stus = <span class="hljs-keyword">new</span> Student[<span class="hljs-number">20</span>];t1.randomInit(stus);<span class="hljs-comment">//t1.printInfo(stus);</span>System.out.println(<span class="hljs-string">"***********************"</span>);t1.sortByScore(stus);t1.printInfo(stus);System.out.println(<span class="hljs-string">"***********************"</span>);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 随机初始化，age取值[17, 20], score取值[30, 100]</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 23, 2020 4:22:36 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> stus Student类数组</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">randomInit</span><span class="hljs-params">(Student[] stus)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length; i++) &#123;<span class="hljs-comment">// 给数组元素赋值</span>stus[i] = <span class="hljs-keyword">new</span> Student();<span class="hljs-comment">// 给Student对象的属性赋值</span>stus[i].id = i + <span class="hljs-number">1</span>;stus[i].age = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">4</span>) + <span class="hljs-number">17</span>;stus[i].score = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">71</span>) + <span class="hljs-number">30</span>;&#125;<span class="hljs-comment">// 方法中调用同一个类的方法</span>printInfo(stus);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 遍历数组</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 23, 2020 4:43:09 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> stus Student类数组</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">(Student[] stus)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length; i++) &#123;stus[i].info();&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 冒泡排序，按成绩从高到低</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 23, 2020 4:30:30 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> stus Student类数组</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sortByScore</span><span class="hljs-params">(Student[] stus)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; stus.length - i - <span class="hljs-number">1</span>; j++) &#123;<span class="hljs-keyword">if</span> (stus[j].score &lt; stus[j + <span class="hljs-number">1</span>].score) &#123;Student temp = stus[j + <span class="hljs-number">1</span>];stus[j + <span class="hljs-number">1</span>] = stus[j];stus[j] = temp;&#125;&#125;&#125;&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<span class="hljs-keyword">int</span> id; <span class="hljs-comment">// 学号</span><span class="hljs-keyword">int</span> age; <span class="hljs-comment">// 年龄</span><span class="hljs-keyword">int</span> score; <span class="hljs-comment">// 成绩</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"学号："</span> + id + <span class="hljs-string">"\t年龄："</span> + age + <span class="hljs-string">"\t成绩："</span> + score);&#125;&#125;</code></pre><h3 id="Day06-0624"><a href="#Day06-0624" class="headerlink" title="Day06-0624"></a>Day06-0624</h3><h4 id="DailyCode06"><a href="#DailyCode06" class="headerlink" title="DailyCode06"></a>DailyCode06</h4><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 1. 方法重载</span><span class="hljs-comment"> * 2. 递归</span><span class="hljs-comment"> * 3. 权限修饰符</span><span class="hljs-comment"> * 4. 构造器</span><span class="hljs-comment"> * 5. this</span><span class="hljs-comment"> * 6. UML</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DailyCode06</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 递归：斐波那契数列</span><span class="hljs-comment">//1</span><span class="hljs-comment">//12</span><span class="hljs-comment">//358</span><span class="hljs-comment">//13213455</span><span class="hljs-comment">//89144233377610</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;System.out.print(fibonacii(i * (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> + j + <span class="hljs-number">1</span>) + <span class="hljs-string">"\t"</span>);&#125;System.out.println();&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibonacii</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">return</span> fibonacii(n - <span class="hljs-number">1</span>) + fibonacii(n - <span class="hljs-number">2</span>);&#125;&#125;</code></pre><h4 id="BankTest"><a href="#BankTest" class="headerlink" title="BankTest"></a>BankTest</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 创建银行对象，最多有10个客户</span>Bank bank = <span class="hljs-keyword">new</span> Bank(<span class="hljs-number">10</span>);<span class="hljs-comment">// 添加客户 张三，为其添加账户，金额为1000</span>bank.addCustomer(<span class="hljs-string">"张"</span>, <span class="hljs-string">"三"</span>, <span class="hljs-keyword">new</span> Account(<span class="hljs-number">1000</span>));<span class="hljs-comment">// 添加客户 李四</span>bank.addCustomer(<span class="hljs-string">"李"</span>, <span class="hljs-string">"四"</span>);<span class="hljs-comment">// 为索引为1的客户添加账户，金额为1234</span>bank.getCustomer(<span class="hljs-number">1</span>).setAccount(<span class="hljs-keyword">new</span> Account(<span class="hljs-number">1234</span>));<span class="hljs-comment">// 添加客户 王五</span>bank.addCustomer(<span class="hljs-string">"王"</span>, <span class="hljs-string">"五"</span>);<span class="hljs-comment">// 输出索引为0的客户的账户的金额</span>System.out.println(bank.getCustomer(<span class="hljs-number">0</span>).getAccount().getBalance());<span class="hljs-comment">// 向索引为0的客户的账户存入999</span>bank.getCustomer(<span class="hljs-number">0</span>).getAccount().deposit(<span class="hljs-number">999</span>);<span class="hljs-comment">// 从索引为0的客户的账户取出888</span>bank.getCustomer(<span class="hljs-number">0</span>).getAccount().withdraw(<span class="hljs-number">888</span>);System.out.println(bank.getCustomer(<span class="hljs-number">0</span>).getAccount().getBalance());<span class="hljs-comment">// 从索引为0的客户的账户取出1888</span>bank.getCustomer(<span class="hljs-number">0</span>).getAccount().withdraw(<span class="hljs-number">1888</span>);System.out.println(bank.getCustomer(<span class="hljs-number">0</span>).getAccount().getBalance());<span class="hljs-comment">// 输出银行bank对象的客户数量</span>System.out.println(bank.getNumOfCustomer());bank.printInfo();&#125;&#125;</code></pre><h5 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h5><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Account</span><span class="hljs-comment"> * - balance : double</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * + Account(init_balance : double)</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * + getBalance() : double</span><span class="hljs-comment"> * + deposit(amt : double)//存款</span><span class="hljs-comment"> * + withdraw(amt : double)//提款</span><span class="hljs-comment"> */</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 账户类</span><span class="hljs-comment"> *  - 属性：balance //金额</span><span class="hljs-comment"> * - 方法：</span><span class="hljs-comment"> * getBalance()//获取金额</span><span class="hljs-comment"> * deposit()//存款</span><span class="hljs-comment"> * withdraw()//提款</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh Email:ln_zh@qq.com</span><span class="hljs-comment"> * <span class="hljs-doctag">@version</span></span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 24, 2020 2:39:51 PM</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">()</span> </span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span> </span>&#123;<span class="hljs-keyword">this</span>.balance = balance;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 获取账户Account对象的金额</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 24, 2020 2:21:55 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.balance;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 向账户内存款</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 24, 2020 2:23:02 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> amt 存入的金额</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amt)</span> </span>&#123;<span class="hljs-keyword">if</span> (amt &lt;= <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">"存款失败！"</span>);<span class="hljs-keyword">return</span>;&#125;balance += amt;System.out.println(<span class="hljs-string">"成功存入："</span> + amt + <span class="hljs-string">",当前金额为："</span> + balance);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 从账户内取款</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 24, 2020 2:24:36 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> amt 取出的金额</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amt)</span> </span>&#123;<span class="hljs-keyword">if</span>(amt&gt;balance || amt&lt;=<span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">"取款失败！"</span>);<span class="hljs-keyword">return</span>;&#125;balance -= amt;System.out.println(<span class="hljs-string">"成功取出："</span> + amt + <span class="hljs-string">",当前金额为："</span> + balance);&#125;&#125;</code></pre><h5 id="Customer"><a href="#Customer" class="headerlink" title="Customer"></a>Customer</h5><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Customer</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * - firstName : String</span><span class="hljs-comment"> * - lastName : String</span><span class="hljs-comment"> * - account : Account</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * + Customer(f:String, l:String)</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * + getFirstName() : String</span><span class="hljs-comment"> * + getLastName() : String</span><span class="hljs-comment"> * + getAccount() : Account</span><span class="hljs-comment"> * + setAccount(acct : Account) </span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<span class="hljs-keyword">private</span> String firstName;<span class="hljs-keyword">private</span> String lastName;<span class="hljs-keyword">private</span> Account account;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">()</span> </span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">(String f, String l)</span> </span>&#123;firstName = f;lastName = l;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">(String f, String l, Account acct)</span> </span>&#123;<span class="hljs-keyword">this</span>(f,l);<span class="hljs-keyword">this</span>.account = acct;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFirstName</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> firstName;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLastName</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> lastName;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> Account <span class="hljs-title">getAccount</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> account;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccount</span><span class="hljs-params">(Account acct)</span> </span>&#123;account = acct;&#125;&#125;</code></pre><h5 id="Bank"><a href="#Bank" class="headerlink" title="Bank"></a>Bank</h5><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Bank</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * - customers : Customer[]</span><span class="hljs-comment"> * - numberOfCustomer : int</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * + Bank()</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * + addCustomer(f:String, l:String)</span><span class="hljs-comment"> * + getNumOfCustomer() : int</span><span class="hljs-comment"> * + getCustomer(index:int) : Customer</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span> </span>&#123;<span class="hljs-keyword">private</span> Customer[] customers;<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> numberOfCustomer;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Bank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;customers = <span class="hljs-keyword">new</span> Customer[num];&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCustomer</span><span class="hljs-params">(String f, String l)</span> </span>&#123;customers[numberOfCustomer++] = <span class="hljs-keyword">new</span> Customer(f, l);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCustomer</span><span class="hljs-params">(String f, String l, Account acct)</span> </span>&#123;customers[numberOfCustomer++] = <span class="hljs-keyword">new</span> Customer(f, l, acct);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 获取客户数量</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 24, 2020 2:35:50 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 客户数量</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumOfCustomer</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> numberOfCustomer;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 获取指定索引的客户对象</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 24, 2020 2:37:07 PM</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> index</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Customer Object</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">getCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<span class="hljs-keyword">return</span> customers[index];&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 打印所有客户的姓名和账户金额</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lnzh</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> Jun 24, 2020 2:38:17 PM</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numberOfCustomer; i++) &#123;<span class="hljs-keyword">if</span> (customers[i] != <span class="hljs-keyword">null</span>) &#123;System.out.println(i + <span class="hljs-string">"\t客户："</span> + customers[i].getFirstName() + customers[i].getLastName() + <span class="hljs-string">"\t当前账户金额为："</span>+ ((customers[i].getAccount() == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0.0</span> : customers[i].getAccount().getBalance()));&#125;&#125;&#125;&#125;</code></pre><h3 id="Day06-项目二：客户管理系统"><a href="#Day06-项目二：客户管理系统" class="headerlink" title="Day06-项目二：客户管理系统"></a>Day06-项目二：客户管理系统</h3><p>结构：</p><ul><li>day06_prj02<ul><li>src<ul><li>com.lnzh.bean<ul><li>Customer.java</li></ul></li><li>com.lnzh.service<ul><li>CustomerList.java</li></ul></li><li>com.lnzh.util<ul><li>CustomerUtility.java</li></ul></li><li>com.lnzh.view<ul><li>CustomerView.java</li></ul></li></ul></li></ul></li></ul><h4 id="Customer-1"><a href="#Customer-1" class="headerlink" title="Customer"></a>Customer</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lnzh.bean;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<span class="hljs-keyword">private</span> String name;<span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span> gender;<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<span class="hljs-keyword">private</span> String phone;<span class="hljs-keyword">private</span> String email;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">()</span> </span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">(String name, <span class="hljs-keyword">char</span> gender, <span class="hljs-keyword">int</span> age, String phone, String email)</span> </span>&#123;<span class="hljs-keyword">this</span>.name = name;<span class="hljs-keyword">this</span>.gender = gender;<span class="hljs-keyword">this</span>.age = age;<span class="hljs-keyword">this</span>.phone = phone;<span class="hljs-keyword">this</span>.email = email;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> name;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<span class="hljs-keyword">this</span>.name = name;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> gender;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(<span class="hljs-keyword">char</span> gender)</span> </span>&#123;<span class="hljs-keyword">this</span>.gender = gender;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> age;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<span class="hljs-keyword">this</span>.age = age;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPhone</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> phone;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhone</span><span class="hljs-params">(String phone)</span> </span>&#123;<span class="hljs-keyword">this</span>.phone = phone;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> email;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<span class="hljs-keyword">this</span>.email = email;&#125;&#125;</code></pre><h4 id="CustomerList"><a href="#CustomerList" class="headerlink" title="CustomerList"></a>CustomerList</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lnzh.service;<span class="hljs-keyword">import</span> com.lnzh.bean.Customer;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerList</span> </span>&#123;<span class="hljs-keyword">private</span> Customer[] customers;<span class="hljs-comment">// 用来保存客户对象的数组</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> total;<span class="hljs-comment">// 记录已保存客户对象的数量</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomerList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalCustomer)</span> </span>&#123;customers = <span class="hljs-keyword">new</span> Customer[totalCustomer];&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addCustomer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<span class="hljs-keyword">if</span> (total == customers.length) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;customers[total++] = customer;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= total) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index; i &lt; total; i++) &#123;customers[i] = customers[i + <span class="hljs-number">1</span>];&#125;customers[--total] = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">replaceCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, Customer customer)</span> </span>&#123;<span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= total) &#123;System.out.println(<span class="hljs-string">"替换失败"</span>);<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;customers[index] = customer;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">getCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= customers.length) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-keyword">return</span> customers[index];&#125;<span class="hljs-keyword">public</span> Customer[] getAllCustomers() &#123;Customer[] custs = <span class="hljs-keyword">new</span> Customer[total];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; total; i++) &#123;custs[i] = customers[i];&#125;<span class="hljs-keyword">return</span> custs;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> total;&#125;&#125;</code></pre><h4 id="CustomerUtility"><a href="#CustomerUtility" class="headerlink" title="CustomerUtility"></a>CustomerUtility</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lnzh.util;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerUtility</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readServiceKey</span><span class="hljs-params">()</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);String key;System.out.print(<span class="hljs-string">"请输入所需的服务项："</span>);key = scan.next();<span class="hljs-keyword">while</span> (!(key.equals(<span class="hljs-string">"1"</span>) || key.equals(<span class="hljs-string">"2"</span>) || key.equals(<span class="hljs-string">"3"</span>) || key.equals(<span class="hljs-string">"4"</span>) || key.equals(<span class="hljs-string">"5"</span>))) &#123;System.out.print(<span class="hljs-string">"输入不合法，请重新输入："</span>);key = scan.next();&#125;<span class="hljs-keyword">return</span> key;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">readExitConfirm</span><span class="hljs-params">()</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);String key;System.out.print(<span class="hljs-string">"输入Y/y确认退出："</span>);key = scan.next();<span class="hljs-keyword">if</span> (key.equals(<span class="hljs-string">"y"</span>) || key.equals(<span class="hljs-string">"Y"</span>)) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">readIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> total)</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-keyword">int</span> key;System.out.print(<span class="hljs-string">"请输入序号："</span>);key = scan.nextInt();<span class="hljs-keyword">while</span> (key &lt; <span class="hljs-number">1</span>||key &gt; total) &#123;System.out.print(<span class="hljs-string">"输入不合法，请重新输入："</span>);key = scan.nextInt();&#125;<span class="hljs-keyword">return</span> key - <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readString</span><span class="hljs-params">()</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-keyword">return</span> scan.next();&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> <span class="hljs-title">readChar</span><span class="hljs-params">()</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-keyword">return</span>  scan.next().charAt(<span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">readInt</span><span class="hljs-params">()</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-keyword">return</span> scan.nextInt();&#125;&#125;</code></pre><h4 id="CustomerView"><a href="#CustomerView" class="headerlink" title="CustomerView"></a>CustomerView</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lnzh.view;<span class="hljs-keyword">import</span> com.lnzh.bean.Customer;<span class="hljs-keyword">import</span> com.lnzh.service.CustomerList;<span class="hljs-keyword">import</span> com.lnzh.util.CustomerUtility;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerView</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;CustomerView viewer = <span class="hljs-keyword">new</span> CustomerView();viewer.enterMainMenu();&#125;<span class="hljs-keyword">private</span> CustomerList list = <span class="hljs-keyword">new</span> CustomerList(<span class="hljs-number">10</span>);<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enterMainMenu</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">boolean</span> isExit = <span class="hljs-keyword">false</span>;<span class="hljs-keyword">while</span> (!isExit) &#123;System.out.println(<span class="hljs-string">"--------------------------客户管理系统------------------------\n"</span>);System.out.println(<span class="hljs-string">"\t\t\t1. 添加用户信息"</span>);System.out.println(<span class="hljs-string">"\t\t\t2. 修改用户信息"</span>);System.out.println(<span class="hljs-string">"\t\t\t3. 删除用户信息"</span>);System.out.println(<span class="hljs-string">"\t\t\t4. 查看用户信息"</span>);System.out.println(<span class="hljs-string">"\t\t\t5. 退  出"</span>);System.out.println(<span class="hljs-string">"\n------------------------------------------------------------\n"</span>);String key = CustomerUtility.readServiceKey();<span class="hljs-keyword">switch</span> (key) &#123;<span class="hljs-keyword">case</span> <span class="hljs-string">"1"</span>:addNewCustomer();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">"2"</span>:modifyCustomer();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">"3"</span>:deleteCustomer();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">"4"</span>:listAllCustomers();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">"5"</span>:isExit = CustomerUtility.readExitConfirm();<span class="hljs-keyword">break</span>;&#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNewCustomer</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"************************* 添加客户 **************************"</span>);Customer cust = <span class="hljs-keyword">new</span> Customer();System.out.print(<span class="hljs-string">"姓名："</span>);cust.setName(CustomerUtility.readString());System.out.print(<span class="hljs-string">"性别："</span>);cust.setGender(CustomerUtility.readChar());System.out.print(<span class="hljs-string">"年龄："</span>);cust.setAge(CustomerUtility.readInt());System.out.print(<span class="hljs-string">"电话："</span>);cust.setPhone(CustomerUtility.readString());System.out.print(<span class="hljs-string">"邮箱："</span>);cust.setEmail(CustomerUtility.readString());list.addCustomer(cust);System.out.println(<span class="hljs-string">"************************************************************"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyCustomer</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"*********************** 修改客户信息 ************************"</span>);<span class="hljs-keyword">int</span> index = CustomerUtility.readIndex(list.getTotal());Customer cust = list.getCustomer(index);System.out.print(<span class="hljs-string">"姓名("</span> + cust.getName() + <span class="hljs-string">",输入n不修改)："</span>);String name = CustomerUtility.readString();name = (name.equals(<span class="hljs-string">"n"</span>)) ? cust.getName() : name;System.out.print(<span class="hljs-string">"性别("</span> + cust.getGender() + <span class="hljs-string">",输入n不修改)："</span>);<span class="hljs-keyword">char</span> gender = CustomerUtility.readChar();gender = (gender == <span class="hljs-string">'n'</span>) ? cust.getGender() : gender;System.out.print(<span class="hljs-string">"年龄("</span> + cust.getAge() + <span class="hljs-string">",输入0不修改)："</span>);<span class="hljs-keyword">int</span> age = CustomerUtility.readInt();age = (age == <span class="hljs-number">0</span>) ? cust.getAge() : age;System.out.print(<span class="hljs-string">"电话("</span> + cust.getPhone() + <span class="hljs-string">",输入n不修改)："</span>);String phone = CustomerUtility.readString();phone = (phone.equals(<span class="hljs-string">"n"</span>)) ? cust.getPhone() : phone;System.out.print(<span class="hljs-string">"邮箱("</span> + cust.getEmail() + <span class="hljs-string">",输入n不修改)："</span>);String email = CustomerUtility.readString();email = (email.equals(<span class="hljs-string">"n"</span>)) ? cust.getEmail() : email;Customer custNew = <span class="hljs-keyword">new</span> Customer(name, gender, age, phone, email);list.replaceCustomer(index, custNew);System.out.println(<span class="hljs-string">"************************************************************"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteCustomer</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"************************************************************"</span>);<span class="hljs-keyword">boolean</span> flag = list.deleteCustomer(CustomerUtility.readIndex(list.getTotal()));<span class="hljs-keyword">if</span> (flag) &#123;System.out.println(<span class="hljs-string">"删除成功！"</span>);&#125; <span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">"删除失败！"</span>);&#125;System.out.println(<span class="hljs-string">"************************************************************"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listAllCustomers</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"************************************************************"</span>);System.out.println(<span class="hljs-string">"序号\t姓名\t性别\t年龄\t手机号\t\t邮箱"</span>);Customer[] custs = list.getAllCustomers();<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (custs.length == <span class="hljs-number">0</span>) &#123;i = custs.length;System.out.println(<span class="hljs-string">"当前没有用户数据！"</span>);&#125;<span class="hljs-keyword">for</span> (; i &lt; custs.length; i++) &#123;System.out.println((i + <span class="hljs-number">1</span>) + <span class="hljs-string">"\t"</span> + custs[i].getName() + <span class="hljs-string">"\t"</span> + custs[i].getGender() + <span class="hljs-string">"\t"</span>+ custs[i].getAge() + <span class="hljs-string">"\t"</span> + custs[i].getPhone() + <span class="hljs-string">"\t"</span> + custs[i].getEmail());&#125;System.out.println(<span class="hljs-string">"************************************************************"</span>);&#125;&#125;</code></pre><h2 id="DailyReview"><a href="#DailyReview" class="headerlink" title="DailyReview"></a>DailyReview</h2><h3 id="Day03-0621-1"><a href="#Day03-0621-1" class="headerlink" title="Day03-0621"></a>Day03-0621</h3><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">根据输入指定季节，输出包含的月份</span><span class="hljs-comment">Scanner if-else str.equals()</span><span class="hljs-comment">根据随机生成的月份，输出指定季节</span><span class="hljs-comment">Math.random() switch-case</span><span class="hljs-comment">*/</span><span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Review</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);System.out.print(<span class="hljs-string">"输入一个季节(春/夏/秋/冬):"</span>);String season = scan.next();<span class="hljs-keyword">if</span> (season.equals(<span class="hljs-string">"春"</span>)) &#123;System.out.println(<span class="hljs-string">"3、4、5月为春季"</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (season.equals(<span class="hljs-string">"夏"</span>)) &#123;System.out.println(<span class="hljs-string">"6、7、8月为夏季"</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (season.equals(<span class="hljs-string">"秋"</span>)) &#123;System.out.println(<span class="hljs-string">"9、10、11月为秋季"</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (season.equals(<span class="hljs-string">"冬"</span>)) &#123;System.out.println(<span class="hljs-string">"12、1、2月为冬季"</span>);&#125;<span class="hljs-keyword">else</span>&#123;System.out.println(<span class="hljs-string">"输入不合规范！"</span>);&#125;<span class="hljs-keyword">int</span> month = (<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">12</span>) + <span class="hljs-number">1</span>;System.out.println(<span class="hljs-string">"get month = "</span> + month);<span class="hljs-keyword">switch</span>(month)&#123;<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:System.out.println(month + <span class="hljs-string">"月是春季"</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:System.out.println(month + <span class="hljs-string">"月是夏季"</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:System.out.println(month + <span class="hljs-string">"月是秋季"</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:System.out.println(month + <span class="hljs-string">"月是冬季"</span>);<span class="hljs-keyword">break</span>;&#125;&#125;&#125;</code></pre><h3 id="Day04-0622-1"><a href="#Day04-0622-1" class="headerlink" title="Day04-0622"></a>Day04-0622</h3><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 改用while循环完成水仙花数和质数</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Review</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 三位数水仙花数</span><span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>, bai, shi, ge;<span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">1000</span>) &#123;bai = i / <span class="hljs-number">100</span>;shi = (i - <span class="hljs-number">100</span>*bai) / <span class="hljs-number">10</span>;ge = i - <span class="hljs-number">100</span>*bai - <span class="hljs-number">10</span>*shi;<span class="hljs-keyword">if</span>(i == (<span class="hljs-keyword">int</span>)(Math.pow(bai, <span class="hljs-number">3</span>)+Math.pow(shi, <span class="hljs-number">3</span>)+Math.pow(ge, <span class="hljs-number">3</span>))) &#123;System.out.println(i);&#125;i++;&#125;<span class="hljs-comment">// 质数</span>i = <span class="hljs-number">2</span>;<span class="hljs-keyword">int</span> j, count = <span class="hljs-number">0</span>;<span class="hljs-keyword">boolean</span> isPrime = <span class="hljs-keyword">true</span>;<span class="hljs-keyword">long</span> start = System.currentTimeMillis();<span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">100000</span>) &#123;j = <span class="hljs-number">2</span>;<span class="hljs-keyword">while</span>(j &lt;= Math.sqrt(i)) &#123;<span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;isPrime = <span class="hljs-keyword">false</span>;<span class="hljs-keyword">break</span>;&#125;j++;&#125;<span class="hljs-keyword">if</span> (isPrime) &#123;<span class="hljs-comment">//System.out.println("得到质数：" + i);</span>count++;&#125;isPrime = <span class="hljs-keyword">true</span>;i++;&#125;<span class="hljs-keyword">long</span> end = System.currentTimeMillis();System.out.println(<span class="hljs-string">"获取质数个数："</span> + count);System.out.println(end - start);&#125;&#125;</code></pre><h3 id="Day05-0623-1"><a href="#Day05-0623-1" class="headerlink" title="Day05-0623"></a>Day05-0623</h3><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 1. 数组初始化和常用Arrays工具类</span><span class="hljs-comment"> * 2. 数组翻转</span><span class="hljs-comment"> * 3. 二分查找</span><span class="hljs-comment"> * 4. 冒泡排序</span><span class="hljs-comment"> */</span><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Review05</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span>[] arr11 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">5</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">7</span> &#125;;<span class="hljs-keyword">int</span>[] arr111 = &#123; <span class="hljs-number">5</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">7</span> &#125;;<span class="hljs-keyword">boolean</span> isEqual = Arrays.equals(arr11, arr111);System.out.println(isEqual);<span class="hljs-comment">// 数组翻转</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr11.length / <span class="hljs-number">2</span>; i++) &#123;<span class="hljs-keyword">int</span> temp = arr11[i];arr11[i] = arr11[arr11.length - i - <span class="hljs-number">1</span>];arr11[arr11.length - i - <span class="hljs-number">1</span>] = temp;&#125;System.out.println(Arrays.toString(arr11));<span class="hljs-keyword">int</span>[] arr12 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">6</span>];Arrays.fill(arr12, <span class="hljs-number">2</span>);System.out.println(Arrays.toString(arr12));Arrays.sort(arr11);System.out.println(Arrays.toString(arr11));System.out.println(Arrays.binarySearch(arr11, -<span class="hljs-number">2</span>));<span class="hljs-keyword">int</span>[][] arr13 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123; &#123; -<span class="hljs-number">1</span>, <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-number">2</span>, -<span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">10</span> &#125; &#125;;System.out.println(Arrays.toString(arr13));<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr13.length; i++) &#123;System.out.print(Arrays.toString(arr13[i]) + <span class="hljs-string">"\t"</span>);&#125;System.out.println();<span class="hljs-keyword">int</span>[][] arr14 = &#123; &#123; -<span class="hljs-number">1</span>, <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-number">2</span>, -<span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">10</span> &#125; &#125;;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr14.length; i++) &#123;System.out.print(Arrays.toString(arr14[i]) + <span class="hljs-string">"\t"</span>);&#125;System.out.println();System.out.println(Arrays.equals(arr13, arr14));<span class="hljs-keyword">int</span>[][] arr15 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][];<span class="hljs-keyword">int</span>[][] arr16 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];arr15[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">11</span>, <span class="hljs-number">22</span> &#125;;arr16[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;arr16[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">12</span>;System.out.println(Arrays.equals(arr15, arr16));<span class="hljs-comment">// 二分查找 arr11 = &#123;-7, -2, -1, 0, 4, 5&#125;</span><span class="hljs-keyword">int</span> value = <span class="hljs-number">4</span>;<span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> end = arr11.length - <span class="hljs-number">1</span>;<span class="hljs-keyword">boolean</span> inSeq = <span class="hljs-keyword">false</span>;<span class="hljs-keyword">while</span> (head &lt;= end) &#123;<span class="hljs-keyword">int</span> middle = (head + end) / <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (arr11[middle] == value) &#123;System.out.println(<span class="hljs-string">"下标为："</span> + middle);inSeq = <span class="hljs-keyword">true</span>;<span class="hljs-keyword">break</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr11[middle] &lt; value) &#123;head = middle + <span class="hljs-number">1</span>;&#125; <span class="hljs-keyword">else</span> &#123;end = middle - <span class="hljs-number">1</span>;&#125;&#125;<span class="hljs-keyword">if</span> (!inSeq) &#123;System.out.println(<span class="hljs-string">"未找到"</span>);&#125;<span class="hljs-comment">// 冒泡排序</span><span class="hljs-keyword">double</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">20</span>];System.out.println(<span class="hljs-string">"冒泡原序列："</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;arr[i] = Math.random() * <span class="hljs-number">10.0</span> - <span class="hljs-number">5.0</span>;System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);&#125;System.out.println();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<span class="hljs-keyword">double</span> temp = arr[j];arr[j + <span class="hljs-number">1</span>] = arr[j];arr[j] = temp;&#125;&#125;&#125;System.out.println(<span class="hljs-string">"排序后："</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);&#125;System.out.println();&#125;&#125;</code></pre><h3 id="Day06-0624-1"><a href="#Day06-0624-1" class="headerlink" title="Day06-0624"></a>Day06-0624</h3><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 1. 设计Cylinder类</span><span class="hljs-comment"> * 2. 属性有底边半径radius和高height</span><span class="hljs-comment"> * 3. 方法有</span><span class="hljs-comment"> * - 打印底边半径、高、底面积、体积</span><span class="hljs-comment"> * - 获取底面积</span><span class="hljs-comment"> * - 获取体积</span><span class="hljs-comment"> * - 设置底边半径和高</span><span class="hljs-comment"> * 4. 在main方法中测试</span><span class="hljs-comment"> * 5，另外复习了一下switch语句</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Review06</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Cylinder c1 = <span class="hljs-keyword">new</span> Cylinder();c1.printInfo();c1.setAttrs(<span class="hljs-number">2.0</span>, <span class="hljs-number">1.0</span>);c1.printInfo();c1.setAttrs(<span class="hljs-number">3.0</span>, -<span class="hljs-number">1</span>);System.out.println(c1.getArea());System.out.println(c1.getVolume());show(<span class="hljs-number">0</span>);show(<span class="hljs-number">1</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<span class="hljs-keyword">switch</span> (i) &#123;<span class="hljs-keyword">default</span>:i += <span class="hljs-number">2</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:i += <span class="hljs-number">1</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:i += <span class="hljs-number">8</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:i += <span class="hljs-number">4</span>;&#125;System.out.println(<span class="hljs-string">"i="</span> + i);&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cylinder</span> </span>&#123;<span class="hljs-keyword">double</span> radius;<span class="hljs-keyword">double</span> height;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"圆柱体的底边半径是"</span> + radius + <span class="hljs-string">"，高是"</span> + height + <span class="hljs-string">"，底面积是"</span> + getArea() + <span class="hljs-string">"体积是"</span> + getVolume());&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> Math.PI * radius * radius;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getVolume</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> Math.PI * radius * radius * height;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setAttrs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> r, <span class="hljs-keyword">double</span> h)</span> </span>&#123;<span class="hljs-keyword">if</span> (r &lt;= <span class="hljs-number">0.0</span> || h &lt;= <span class="hljs-number">0.0</span>) &#123;System.out.println(<span class="hljs-string">"数值不合理，赋值失败！"</span>);<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125; <span class="hljs-keyword">else</span> &#123;radius = r;height = h;System.out.println(<span class="hljs-string">"底边半径已更改为："</span> + radius + <span class="hljs-string">"，高已更改为："</span> + height);<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;&#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习记录</title>
    <link href="/2020/06/20/learn_java/"/>
    <url>/2020/06/20/learn_java/</url>
    
    <content type="html"><![CDATA[<h2 id="错误集"><a href="#错误集" class="headerlink" title="错误集"></a>错误集</h2><ul><li><p>字符型与字符串声明</p><pre><code class="hljs java"><span class="hljs-comment">// 排序输出</span>System.out.println(num3 + <span class="hljs-string">'&gt;'</span> + num1 + <span class="hljs-string">'&gt;'</span> + num2); <span class="hljs-comment">// ×</span>System.out.println(num3 + <span class="hljs-string">"&gt;"</span> + num1 + <span class="hljs-string">"&gt;"</span> + num2); <span class="hljs-comment">// √</span></code></pre></li><li><p>概念不清</p><pre><code class="hljs java"><span class="hljs-comment">// 闰年判断条件</span>year%<span class="hljs-number">400</span> == <span class="hljs-number">0</span> || (year/<span class="hljs-number">100</span> != <span class="hljs-number">0</span> &amp;&amp; year/<span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-comment">// ×</span>year%<span class="hljs-number">400</span> == <span class="hljs-number">0</span> || (year%<span class="hljs-number">100</span> != <span class="hljs-number">0</span> &amp;&amp; year%<span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-comment">// √</span></code></pre></li><li><p>switch-case语句漏掉 break</p></li><li><p>编译错误：找不到符号</p><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">第一行代码中的点号是runoob那copy过来的</span><span class="hljs-comment">第二行代码中的点号是自己打的，输入法检查了是英文半角，但就是会报错，很奇怪的情况，目前没有解决</span><span class="hljs-comment">*/</span>System.out.println(option.equals( <span class="hljs-string">"不报错"</span> ));System.out.println(option.euqals( <span class="hljs-string">"报错"</span> ));<span class="hljs-comment">/*</span><span class="hljs-comment">错误: 找不到符号</span><span class="hljs-comment">System.out.println(option.euqals( "报错" ));</span><span class="hljs-comment">                         ^</span><span class="hljs-comment">  符号:   方法 euqals(String)</span><span class="hljs-comment">  位置: 类型为String的变量 option</span><span class="hljs-comment">1 个错误</span><span class="hljs-comment">*/</span><span class="hljs-comment">//解决了，不是点号的问题，单词拼写错了，我现在看自己就像是个傻子。</span><span class="hljs-comment">//一直在关注提示的”符号“，没注意更基本的问题，他这个报错应该改成“找不到方法”更合适吧。</span></code></pre></li></ul><ul><li><p>数组空指针异常</p><pre><code class="hljs java">Student[] stus = <span class="hljs-keyword">new</span> Student[<span class="hljs-number">20</span>];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length; i++) &#123;<span class="hljs-comment">// 给数组元素赋值</span>stus[i] = <span class="hljs-keyword">new</span> Student(); <span class="hljs-comment">// 开始漏了这一步，加强理解在内存中的情况</span><span class="hljs-comment">// 给Student对象的属性赋值</span>stus[i].id = i + <span class="hljs-number">1</span>;stus[i].age = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">4</span>) + <span class="hljs-number">17</span>;stus[i].score = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">71</span>) + <span class="hljs-number">30</span>;&#125;</code></pre></li></ul><ul><li><p>Syntax error on token “printInfo”, Identifier expected after this token</p><pre><code class="hljs java"><span class="hljs-comment">// 定义了一个Cylinder类，并在此测试</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Review06</span> </span>&#123;Cylinder c1 = <span class="hljs-keyword">new</span> Cylinder();c1.printInfo(); <span class="hljs-comment">// 错误原因，应该在方法中调用，我这里忘记写main方法了</span>&#125;</code></pre></li></ul><h2 id="零碎的知识"><a href="#零碎的知识" class="headerlink" title="零碎的知识"></a>零碎的知识</h2><ul><li><p>资源管理器地址栏输入cmd回车直接在当前路径打开cmd</p></li><li><p><code>util</code>全称<strong>utility</strong>，意为有用的工具。</p></li><li><p>最近开始使用eclipse，但是写代码的过程中发现熟悉的<code>ctrl + /</code>不能注释代码，然后在<code>windows-&gt;perferences-&gt;general-&gt;key</code>找到Toggle Comment的快捷键确认是<code>ctrl+/</code>没错，而且我没有装任何输入法，也就是说不是外部快捷键冲突的问题，所以只能是软件本身有快捷键冲突，后来找到资料发现小键盘的<code>/</code>在这里是表示为<code>Numpad_Divide</code>，接着在设置里发现Toggle Folding的快捷键是<code>ctrl + Numpad_Divide</code>，将其改为别的就OK了。（顺便：*是Numpad_Multiply，+是Numpad_Add，-是Numpad_Subtract）</p></li><li><p>eclipse常用快捷键</p><ul><li>单行注释：<code>ctrl + /</code>或<code>ctrl + shift + C</code></li><li>多行注释：<code>ctrl + shift + /</code></li><li>删除当前行：<code>ctrl+d</code></li><li>自动补全代码或者提示代码：<code>alt+/</code></li><li>上下移动选中的行：<code>Alt+方向键上下</code></li><li>复制选中的行：<code>Control+Alt+方向上下键</code></li><li>格式化代码：<code>ctrl + shift + F</code></li><li>快速修复：<code>ctrl + 1</code></li><li>批量导入包：<code>ctrl + shift + o</code></li><li>查看源代码：<code>ctrl + shift + t</code></li><li>查看继承树：<code>ctrl + t</code></li><li>显示类结构并支持搜索指定方法、属性等：<code>ctrl + o</code></li><li>选中切换大写：<code>ctrl + shift + x</code></li><li>选中切换小写：<code>ctrl + shift + y</code></li><li>查看选中项属性：<code>alt + enter</code></li><li>追踪选中单词：<code>ctrl + k</code></li></ul></li><li><p>== 和 equals()</p><ul><li>== 运算符<ul><li>基本数据类型比较的是变量存储的数据<ul><li>基本数据类型可不同，如(<code>65==65.0</code>)和(<code>65==&#39;A&#39;</code>) 都是是<code>ture</code></li></ul></li><li>引用数据类型比较的是两个对象的地址值，即是否指向同一个对象</li></ul></li><li>equals()方法<ul><li>只能用于引用数据类型</li><li>Object类中定义的equals()与==的作用是相同的</li><li>String、Date、File、包装类等的equals()方法都是重写过的，比较的不是地址值</li></ul></li><li>通常自定义的类需要用到equals()方法时，也需要进行重写，主要比较对象相应的属性</li></ul></li><li><p>Junit单元测试方法</p><ul><li>选中当前工程 - 右键选择：build path - add libraries - JUnit 4 - 下一步</li><li><code>import org.junit.Test</code></li><li>创建Java类<ul><li>要求：此类是public、提供空参构造器</li></ul></li><li>在类中声明单元测试方法(@Test)<ul><li>要求：方法是public，没有返回值，没有形参</li></ul></li></ul></li><li><p>包装类</p><ul><li><p>使基本数据类型具有类的特征根</p></li><li><p>包装类的父类是<code>Number</code>类</p></li><li><p>基本数据类型 ←→ 包装类：自动装箱、自动拆箱(&gt;=JDK5.0)</p></li><li><p>基本数据类型、包装类 → <code>String</code>：调用String类的<code>valueOf(Xxx xxx)</code></p></li><li><p><code>String</code> → 基本数据类型、包装类：调用包装类的<code>parseXxx(String str)</code></p><ul><li>转换可能出现时<code>NumberFormatException</code></li></ul></li><li><p><code>Integer</code>内部定义了<code>IntegerCache</code>结构，<code>IntegerCache</code>中定义了<code>Integer[]</code>，保存了-128~127范围内的整数，在使用自动装箱的方式给Integer对象赋值时，对于这个范围内的数会直接使用数组中的元素，而不是通过<code>new</code>，效率更高。</p></li></ul></li><li><p>单例设计模式</p><ul><li>减少系统性能开销</li><li>饿汉式：好处：线程安全。坏处：对象加载时间过长</li><li>懒汉式：好处：延迟对象创建。</li></ul></li></ul><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="1-1-软件开发介绍"><a href="#1-1-软件开发介绍" class="headerlink" title="1.1 软件开发介绍"></a>1.1 软件开发介绍</h3><p>软件：数据+指令(算法)</p><p>GUI(Graphic User Interface)：图形化界面</p><p>CLI(Command Line Interface)：命令行方式</p><p>API(Application Programming Interface)：应用程序编程接口</p><p>常用DOS命令</p><pre><code class="hljs dos"><span class="hljs-built_in">dir</span>：列出当前目录的文件(夹)<span class="hljs-built_in">md</span>：创建目录<span class="hljs-built_in">rd</span>：删除(空)目录<span class="hljs-built_in">del</span>：删除文件/目录<span class="hljs-keyword">exit</span>：退出DOS<span class="hljs-built_in">echo</span> hello&gt;<span class="hljs-number">1</span>.<span class="hljs-built_in">md</span></code></pre><p>机器语言（指令以二进制代码形式存在）-&gt;  汇编语言（用注记符表示机器指令）</p><h3 id="1-2-Java"><a href="#1-2-Java" class="headerlink" title="1.2 Java"></a>1.2 Java</h3><p>Java SE(Java Standard Edition)(桌面级应用)</p><p>Java EE(Java Enterprise Edition)(Web应用)</p><p>三个特点：</p><ol><li><p>面向对象</p><ul><li><p>类、对象</p></li><li><p>封装、继承、多态</p></li></ul></li><li><p>健壮性</p><ul><li>吸收C/C++的优点，去掉了指针、内存的申请释放等</li></ul></li><li><p>跨平台性</p><ul><li>JVM(Java Virtual Machine)</li></ul></li></ol><p>两种核心机制：</p><ol><li><p>JVM</p></li><li><p>垃圾收集机制(Garbage Collection)</p></li></ol><p>JDK(Java Development Kit)</p><ul><li>JDK = JRE + 开发工具集(javac编译工具等)</li></ul><p>JRE(Java Runtime Environment)</p><ul><li>JRE = JVM + Java SE标准类库</li></ul><h3 id="1-3-HelloWorld"><a href="#1-3-HelloWorld" class="headerlink" title="1.3 HelloWorld"></a>1.3 HelloWorld</h3><ol><li><p>编写：HelloWorld.java</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"><span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">*/</span><span class="hljs-comment">//java源文件中只能有一个类声明为public，且类名与文件名相同</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span></span>&#123;    <span class="hljs-comment">/*</span><span class="hljs-comment">    程序的入口是main()方法</span><span class="hljs-comment">    */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;        System.out.print(<span class="hljs-string">"Hello, World!"</span>); <span class="hljs-comment">// 不换行</span>        System.out.println(<span class="hljs-string">"Hello, World!"</span>);&#125;&#125;</code></pre></li><li><p>编译：<code>javac HelloWorld.java</code></p></li></ol><ul><li>生成 .class文件(字节码文件，有几个类就生成几个)</li></ul><ol start="3"><li><p>运行：<code>java HelloWorld</code></p><ul><li>使用<code>java HelloWorld.class</code>报错是因为配置了classpath</li></ul></li></ol><p>大小写问题：cmd不区分，java内严格区分</p><ul><li><code>javac helloworld.java</code>：√</li><li><code>java helloworld</code>：×<ul><li>找不到或无法加载主类 helloworld</li></ul></li></ul><h3 id="1-4-注释"><a href="#1-4-注释" class="headerlink" title="1.4 注释"></a>1.4 注释</h3><ul><li>单行注释：<code>//</code></li><li>多行注释：<code>/*        */</code></li><li>文档注释：<code>/**       */</code>(可被javadoc解析)</li></ul><h3 id="1-5-命名"><a href="#1-5-命名" class="headerlink" title="1.5 命名"></a>1.5 命名</h3><ul><li>包名：全小写xxyyzz</li><li>类名、接口名：大驼峰XxYyZz</li><li>变量名、方法名：小驼峰xxYyZz</li><li>常量名：全大写(下划线分隔)XX_YY</li></ul><h3 id="1-6-变量"><a href="#1-6-变量" class="headerlink" title="1.6 变量"></a>1.6 变量</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;System.out.println(<span class="hljs-string">"Hello World!"</span>);<span class="hljs-keyword">byte</span> a1 = <span class="hljs-number">12</span>;<span class="hljs-keyword">short</span> a2 = <span class="hljs-number">123</span>;<span class="hljs-keyword">int</span> a3 = <span class="hljs-number">1234</span>;<span class="hljs-keyword">long</span> a4 = <span class="hljs-number">12345l</span>;<span class="hljs-keyword">float</span> f1 = <span class="hljs-number">1.2f</span>;<span class="hljs-keyword">double</span> f2 = <span class="hljs-number">1.23</span>;<span class="hljs-keyword">char</span> c1 = <span class="hljs-string">'a'</span>;    <span class="hljs-keyword">char</span> c2 = <span class="hljs-number">97</span>;<span class="hljs-comment">//效果同上，不建议使用</span>String s = <span class="hljs-string">"abc"</span>;&#125;&#125;</code></pre><ul><li><p>变量类型、变量名、存储的值</p></li><li><p>作用域</p></li><li><p>数据类型</p><ul><li>基本数据类型<ul><li>整型：byte(1字节=8bit)、short(2B)、int(4B)、long(8B)<ul><li>byte范围：-128 ~ 127</li><li>long变量以”l”或”L”结尾：<code>long numLong = 123456L;</code></li></ul></li><li>浮点型：float(4B)、double(8B)<ul><li>float：7位有效数字，范围比long大，以”f”或”F”结尾</li></ul></li><li>字符型：char(2B)<ul><li>声明时用单引号：<code>char c1 = ’a&#39;;</code>(可以是单个字符、转义字符、Unicode，不能为空)</li><li>与前面几种基本数据类型运算时是转为ASCII码进行数值运算</li></ul></li><li>布尔型：boolean(true/false)<ul><li>不能跟其他基本数据类型做运算</li></ul></li></ul></li><li>引用数据类型<ul><li>类：class<ul><li>字符串：String<ul><li>声明时用双引号：<code>String s1 = &quot;Hello&quot;;</code></li><li>连接运算<code>+</code>，运算结果还是String</li></ul></li></ul></li><li>接口：interface</li><li>数组：array</li></ul></li></ul></li><li><p>默认整型为int，浮点型为double</p></li><li><p>成员变量、局部变量</p></li></ul><h3 id="1-7-运算"><a href="#1-7-运算" class="headerlink" title="1.7 运算"></a>1.7 运算</h3><ul><li>自动类型提升<ul><li><code>long l1 = 123;</code></li></ul></li><li>强制类型转换<ul><li>可能出现精度损失<code>int a = (int)12.3;</code></li><li>boolean不能转为其他的数据类型</li></ul></li><li>byte、char、short相互运算结果都为int型</li></ul><h3 id="1-8-进制"><a href="#1-8-进制" class="headerlink" title="1.8 进制"></a>1.8 进制</h3><ul><li>二进制：<strong>0b</strong>或<strong>0B</strong>开头<ul><li>原码、反码、补码<ul><li>正数原反补相同</li><li>负数补码=反码+1</li></ul></li><li>计算机底层以补码的方式存储数据</li></ul></li><li>八进制：<strong>0</strong>开头(0123)</li><li>十六进制：<strong>0x</strong>或<strong>0X</strong>开头，A-F不区分大小写</li></ul><h3 id="1-9-运算符"><a href="#1-9-运算符" class="headerlink" title="1.9 运算符"></a>1.9 运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center"></th></tr></thead><tbody><tr><td align="center">算术运算符</td><td align="center">+、-、*、/、%、++、–</td></tr><tr><td align="center">比较运算符</td><td align="center">==、!=、&lt;、&gt;、&lt;=、&gt;=、instanceof</td></tr><tr><td align="center">逻辑运算符</td><td align="center">&amp;、&amp;&amp;、|、||、!、^</td></tr><tr><td align="center">位运算符</td><td align="center">&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;、&amp;、|、^、~</td></tr><tr><td align="center">三元运算符</td><td align="center"><code>(条件表达式) ? 表达式1 : 表达式2;</code></td></tr></tbody></table><ul><li><p><code>instanceof</code>: 检查是否是类的对象</p><ul><li><code>“Hello” instanceof String</code>    –&gt;    <code>true</code></li></ul></li><li><p>逻辑运算符注</p><ul><li><code>&amp;</code>、<code>|</code>、<code>^</code>: 逻辑与、逻辑或、逻辑异或</li><li><code>&amp;&amp;</code>: 短路与(左边为假，右边不运算)</li><li><code>||</code>: 短路或(左边为真，右边不运算)</li></ul></li><li><p>位运算符</p><ul><li><code>&lt;&lt;</code>：左移，被移除的高位丢弃，空缺位补0</li><li><code>&gt;&gt;</code>：右移，被移位的二进制最高位是0，右移后，空缺位补0； 最高位是1，空缺位补1。</li><li><code>&gt;&gt;&gt;</code>：无符号右移，被移位二进制最高位无论是0或者是1，空缺位都用0补。</li><li><code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>：对应位置与运算、或运算、异或运算、取反运算</li></ul></li></ul><h3 id="1-10-流程控制"><a href="#1-10-流程控制" class="headerlink" title="1.10 流程控制"></a>1.10 流程控制</h3><ul><li><p>顺序结构</p></li><li><p>分支结构</p><ul><li>if-else<ul><li>“小上大下/子上父下”</li><li>else就近配对</li></ul></li><li>switch-case<ul><li>switch后的表达式只能用：byte、short、int、char、String类型、枚举类型</li><li>case后的值必须是常量，不能是变量名或不确定的表达式</li></ul></li></ul></li><li><p>循环结构</p><ul><li>for<ul><li><code>for(int i = 1; i &lt;= 5; i++){}</code></li><li>i只在for循环内有效；(for作用域？局部变量？)</li></ul></li><li>while<ul><li><code>while(i &lt;= 5){i++;}</code></li></ul></li><li>do-while<ul><li><code>do{i++;}while(i &lt;= 5);</code></li><li>先执行一次循环体</li></ul></li></ul></li><li><p><code>continue</code>、<code>break</code></p><ul><li>就近原则</li><li>跳出外层循环<code>label: while(true){ while(true){break label;} }</code></li></ul></li></ul><h3 id="1-11-项目1"><a href="#1-11-项目1" class="headerlink" title="1.11 项目1"></a>1.11 项目1</h3><p><strong>家庭收支记账软件</strong></p><p>需求：界面包括：1. 收支明细 2. 登记收入 3. 登记支出 4. 退出 5. 输入提示</p><p>思路：</p><ul><li>↓打印界面<ul><li>while无限循环来打印主界面，break或者return退出</li><li>用String接收选项，方便处理”异常“</li><li>输入错误信息需提示并重新输入</li><li>switch-case处理每个选项</li></ul></li><li>↓输入信息<ul><li>1    →    打印收支明细<ul><li>序号、当前金额、收支金额(+-表示)、说明<ul><li>金额用int方便计算</li><li>收支明细使用String类存储</li></ul></li></ul></li><li>2    →    登记收入<ul><li>键盘输入金额和说明<ul><li>金额用int</li><li>说明用String</li></ul></li><li>存储到收支明细(利用字符串拼接)</li></ul></li><li>3    →    登记支出<ul><li>同上</li></ul></li><li>4    →    退出<ul><li>输出确认信息<ul><li>String接收y/n确认信息，注意大小写</li></ul></li><li>不退出重新打印界面</li></ul></li></ul></li></ul><blockquote><p>代码见DailyCode/Day03-0621</p></blockquote><h3 id="1-12-数组"><a href="#1-12-数组" class="headerlink" title="1.12 数组"></a>1.12 数组</h3><ul><li><p>数组是引用类型，其元素可以是任何数据类型</p></li><li><p>连续的内存空间</p></li><li><p>长度确定后不能修改</p></li><li><p>初始化</p><ul><li>静态初始化：初始化同时赋值</li><li>动态初始化：初始化时不赋值</li><li>整型初始化默认值为0，浮点型为0.0，字符型为(ASCII的)0或’\u0000’，布尔型是false，引用类型为null</li></ul></li><li><p>一维数组内存解析</p><ul><li>栈(stack)：局部变量</li><li>堆(heap)：new出来的结构：对象、数组</li><li>在堆里分配一定的连续内存空间，在栈里存储指向该内存空间的首地址</li></ul></li><li><p>二维数组</p><ul><li>[[I@6d06d69c</li><li>[[二维数组I整型@6d…地址为6d…</li></ul></li></ul><h3 id="1-13-笔试常见算法"><a href="#1-13-笔试常见算法" class="headerlink" title="1.13 笔试常见算法"></a>1.13 笔试常见算法</h3><ul><li>算法的5个特征：输入、输出、有穷性、确定性、可行性</li><li>数组元素赋值(杨辉三角形、回形数)</li><li>数组的复制、反转、<em>查找</em>(线性查找、二分法查找)</li><li>排序算法<ul><li>时间复杂度、空间复杂度</li><li>稳定性：关键字相等，排序后次序不变</li><li>选择排序<ul><li>直接选择排序、 <em>堆排序</em></li></ul></li><li>交换排序<ul><li><strong>冒泡排序</strong> 、 <strong>快速排序</strong></li></ul></li><li>插入排序<ul><li>直接插入排序、 折半插入排序、 Shell 排序</li></ul></li><li><em>归并排序</em></li><li>桶式排序</li><li>基数排序</li></ul></li></ul><h3 id="1-14-面向对象"><a href="#1-14-面向对象" class="headerlink" title="1.14 面向对象"></a>1.14 面向对象</h3><blockquote><ol><li>Java类及类的成员：属性、方法、构造器；代码块、内部类</li></ol><ul><li>属性 == 成员变量 == field == 域\字段</li><li>方法 == 成员方法 == method == 函数</li><li>创建对象 == 类的实例化</li></ul><ol start="2"><li><p>面向对象的三大特征：封装性、继承性、多态性、(抽象性)</p></li><li><p>其他关键字：<code>this</code>、<code>super</code>、<code>static</code>、<code>final</code>、<code>abstract</code>、<code>interface</code>、<code>package</code>、<code>import</code></p></li></ol></blockquote><ul><li><p>类：对一类事物的描述，是抽象的 </p></li><li><p>对象：实际存在的个体，实例</p><ul><li>匿名对象：不赋值给变量，只调用一次</li></ul></li><li><p>内存解析</p><ul><li>堆：存放实例对象</li><li>栈：存储局部变量</li><li>方法区：存储类信息、常量、静态变量</li></ul></li><li><p>属性</p><ul><li><p>初始化顺序：默认初始化、显示初始化/代码块初始化、构造器初始化、调用setXxx方法</p></li><li><p>属性(成员变量) 和 局部变量</p><ul><li><p>相同点</p><ul><li>定义的格式相同</li><li>先声明在使用</li><li>有对应的作用域</li></ul></li><li><p>不同点</p><ul><li><p>在类中声明的位置不同</p><ul><li>属性：直接在类的{}内</li><li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</li></ul></li><li><p>权限修饰符不同</p><ul><li>属性：可以在声明时指明其权限，使用权限修饰符<ul><li><code>private</code>、<code>public</code>、<code>protected</code>、缺省</li></ul></li><li>局部变量：不可以使用权限修饰符</li></ul></li><li><p>默认初始化值</p><ul><li>属性：根据其类型都有默认初始化值</li><li>局部变量：没有默认初始化值，需要显式赋值</li></ul></li><li><p>在内存中加载的位置</p><ul><li>属性：加载到堆空间（非static）</li><li>局部变量：加载的栈空间</li></ul></li></ul></li></ul></li></ul></li><li><p>方法</p><ul><li>可以调用当前类的属性或方法</li><li>方法的重载(overload)：<strong>同一个类</strong>中，可以有多个<strong>同名的方法</strong>，只要<strong>参数不同</strong>即可(类型、个数)</li><li>方法的重写(override/overwrite)：子类继承父类以后可以对父类中同名同参数的方法进行覆盖操作<ul><li><code>权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型{}</code></li><li>子类重写的方法 方法名和形参列表 与 父类被重写的方法 方法名和形参列表 相同</li><li>子类重写的方法 权限修饰符不小于被重写的方法的权限修饰符<ul><li>特殊：子类不能重写父类中声明为private权限的方法</li></ul></li><li>返回值类型<ul><li>父类被重写的方法返回值类型为void，则子类重写的方法返回值类型只能是void</li><li>————————————-某一个类，则———————————————-该类或该类的子类</li></ul></li><li>———————————-基本数据类型，——————————————–相同的基本数据类型</li><li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li><li>static(不是重写)</li></ul></li><li>可变个数的形参(&gt;= jdk5.0)：<code>数据类型 ... 形参名</code><ul><li>传入参数可以是0个或者多个</li><li>与传入为同类型数组的方法不构成重载</li><li>传入多个形参的方法中可变个数形参必须放在最后且只能有一个</li></ul></li><li>值传递机制<ul><li>基本数据类型传递数据值，引用数据类型传递地址值</li></ul></li><li>递归(recursion)：方法内调用自己<ul><li>递归一定要向已知方向递归，否则这种递归就变成了无穷递归</li></ul></li></ul></li><li><p>构造器(构造方法、constructor)</p><ul><li>作用：1. 创建对象 2. 初始化对象的信息</li><li>创建类的对象：<code>类名 变量名 = new  构造器;</code></li><li>定义构造器(类内)：<code>权限修饰符 类名(形参列表) {}</code><ul><li>如果没有定义，系统默认提供空参的构造器(权限与类相同)</li></ul></li><li>可以重载</li></ul></li><li><p>代码块</p><ul><li>静态：随着类加载而执行，只执行一次</li><li>非静态：随着对象创建而执行，每创建一个对象执行一次</li></ul></li><li><p>封装和隐藏</p><ul><li>Java提供了4种权限修饰符来修饰类及类的内部结构、体现类及类的内部结构在被调用时可见性的大小。</li><li>权限修饰符(小→大)：private、缺省、protected、public<ul><li>可修饰类的内部结构：属性、方法、构造器、内部类</li><li>修饰类只能用：缺省、public</li><li>不同包的不同类(非父类子类关系)，只能调用public的方法或属性</li></ul></li></ul><table><thead><tr><th align="center">修饰符</th><th align="center">类内部</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">同一个工程</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">Yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">(缺省)</td><td align="center">Yes</td><td align="center">Yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr></tbody></table></li><li><p>继承</p><ul><li><code>权限修饰符 class 子类名 extends 父类名 {}</code><ul><li>子类、派生类、subclass</li><li>父类、超类、基类、superclass</li></ul></li><li>好处<ul><li>减少代码冗余，提高了代码的复用性</li><li>便于功能的拓展</li><li>为多态性的使用提供了前提</li></ul></li><li>子类继承了父类所有的属性和方法</li><li>所有类都直接或间接的继承于<code>java.lang.Object</code>类</li><li>Java中继承性的规定<ul><li>一个类可以被多个类继承</li><li>Java<strong>类</strong>的单继承性：一个类只能有一个父类</li><li>多层继承(直接父类、间接父类)</li></ul></li></ul></li><li><p>多态性</p><ul><li>对象的多态性：父类的引用指向子类的对象</li><li>多态性的使用：只能调用父类中声明过的方法，实际执行的是子类重写后的方法——虚拟方法调用<ul><li>调用子类特有的属性和方法：强制类型转换</li><li>可能出现<code>ClassCastException</code>异常，应先用<code>instanceof</code>判断对象是否是相应类(或其父类)的实例</li></ul></li><li>只适用于方法，不适用于属性</li><li>运行时行为</li></ul></li><li><p>拓展</p><ul><li>main()方法<ul><li>main()方法作为程序的入口</li><li>main()方法也是一个普通的静态方法</li><li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）<ul><li>从控制台将数据传给形参：String[] args</li><li>运行时：java 类名 “Tom” “Jerry” “123” “true”</li></ul></li></ul></li><li>Javabean</li><li>UML<ul><li>+表示public，-表示private，#表示protected</li><li>属性写法：属性的权限 属性名：属性的类型</li><li>方法写法：方法的权限  方法名（参数名：参数类型）：返回类型</li></ul></li><li>MVC设计模式<ul><li>视图模型层 <strong>view</strong> 显示数据<ul><li>相关工具类<code>view.utils</code></li><li>自定义view <code>view.ui</code></li></ul></li><li>控制器层 <strong>controller</strong> 处理业务逻辑<ul><li>应用界面相关<code>controller.activity</code></li><li>存放fragment <code>controller.fragment</code></li><li>显示列表的适配器<code>controller.adapter</code></li><li>服务相关的<code>controller.service</code></li><li>抽取的基类<code>controller.base</code></li></ul></li><li>数据模型层 <strong>model</strong> 主要处理数据<ul><li>数据对象封装<code>model.bean</code>/<code>model.domain</code></li><li>数据库操作类<code>model.dao</code></li><li>数据库<code>model.db</code></li></ul></li></ul></li></ul></li><li><p>关键字</p><ul><li><code>this</code>(类比python的self)<ul><li>可以用来修饰属性、方法、构造器(必须放在首行，注意避免死循环)</li><li>通常省略，如果方法的形参和类的属性同名时就得显式使用：<code>this.name = name;</code></li></ul></li><li><code>super</code><ul><li>调用父类的属性和方法(类比this)</li><li>构造器内的使用<ul><li>在子类构造器中显式使用<code>super(形参列表)</code>的方式调用父类中声明的构造器</li><li><code>this(形参列表)</code>和<code>super(形参列表)</code>都要要求在首行，因此只能选其一<ul><li>都没有显式写时，其实默认有父类的空参构造器，因此父类必须有空参构造器，否则报错</li></ul></li></ul></li></ul></li><li><code>static</code><ul><li>可以修饰属性、方法、代码块、内部类</li><li>静态属性、静态变量、类变量<ul><li>类的多个对象共享同一个静态属性，任何一个对象修改了静态属性，其他对象调用该属性时也是修改之后的</li><li>可通过<code>类.静态变量</code>调用</li><li>静态变量随着类加载，因此要早于对象的创建</li><li>类只会加载一次，静态变量在内存中也只会存在一份，存在方法区的静态域中</li></ul></li><li>静态方法<ul><li>可通过<code>类.静态方法</code>调用</li><li>随着类加载</li></ul></li><li>静态方法中只能调用静态的方法或属性，不能用<code>this</code>、<code>super</code>关键词</li></ul></li><li><code>final</code><ul><li>可以修饰类、方法、变量</li><li>修饰类时：不能被其他类继承，如String、System、StringBuffer</li><li>修饰方法时：不能被重写，如getClass()</li><li>修饰变量时：变成常量<ul><li>属性：显式初始化、代码块中初始化、构造器初始化</li><li>局部变量：修饰形参时，表明此形参是常量，在方法体内不能修改其值</li></ul></li></ul></li><li><code>abstract</code><ul><li>可以修饰类、方法</li><li>修饰类时：不能实例化，有构造器(子类实例化时调用)</li><li>修饰方法时：只有方法声明，没有方法体<ul><li><code>权限修饰符 abstract 返回类型 方法名();</code></li><li>有抽象方法的类一定是抽象类</li><li>子类必须重写(直接+间接)父类所有的的抽象方法才可实例化，否则也要用abstract修饰</li></ul></li><li>不能修饰属性、构造器等结构</li><li>不能修饰私有方法、静态方法、final的方法、final的类</li><li>抽象类的匿名子类<ul><li>抽象类名 变量名 = new 抽象类名() {重写抽象方法} ;</li></ul></li></ul></li><li><code>package</code><ul><li>实现类的管理</li><li>在源文件的首行使用package声明类或接口所属的包</li><li>每”.”一次代表一层文件目录</li></ul></li><li><code>import</code><ul><li>在源文件中显式导入指定包下的类或接口</li><li><code>java.lang</code>和 本包 中定义的类或接口，可以省略</li><li>使用同名类时，则至少要有一个使用<strong>全类名</strong></li><li>使用子包下的类需要显式导入</li><li><code>import static</code> + 包名  可以导入指定类或接口中的<strong>静态结构</strong></li></ul></li></ul></li><li><p>Object类</p><ul><li><code>equals()</code><ul><li>比较两个对象的地址值</li></ul></li><li><code>toString()</code><ul><li>返回：类@地址值</li></ul></li></ul></li><li><p>接口<code>interface</code></p><ul><li>Java中接口和类是并列的两个结构</li><li>接口中不能定义构造器，即不能实例化</li><li>版本区别<ul><li>JDK7及以前只能定义全局常量和抽象方法<ul><li>全局常量：public static final 类型 xxx;//修饰符可省略</li><li>抽象方法：public abstract 返回值类型 xxx();//同上</li></ul></li><li>JDK8新增静态方法(static)和默认方法(default)<ul><li>接口中定义的静态方法，只能通过<code>接口名.方法()</code>调用</li><li>实现类的对象可以调用接口中的默认方法</li><li>实现类的父类和接口中声明了同名同参数的默认方法，若未重写，调用父类的该方法</li><li>实现类实现的多个接口中声明了同名同参数的默认方法，若未重写，编译报错(接口冲突)</li><li>实现类内调用特定接口的默认方法：<code>接口名.super.方法()</code></li></ul></li></ul></li><li>Java开发中，接口通过类 实现(<code>implements</code>)的方式使用<ul><li>类 实现 了接口中所有抽象方法之后，则此实现类可以实例化，否则为抽象类</li></ul></li><li>Java类可以实现多个接口，弥补了类但继承性的局限性<ul><li><code>class A extends B implements C, D, E { }</code></li></ul></li><li>接口的多继承<ul><li><code>interface A extends B, C { }</code></li></ul></li><li>接口的使用体现多态性</li></ul></li><li><p>内部类</p><ul><li>成员内部类(静态、非静态)<ul><li>作为外部类的成员<ul><li>可以调用外部类的结构(外部类名.this.结构(没有重名的可以省略前两个))</li><li>可以static修饰</li><li>可以被四种不同的权限修饰</li></ul></li><li>作为一个类<ul><li>类内可以定义属性、方法、构造器等</li><li>可以用final、abstract修饰</li></ul></li></ul></li><li>局部内部类(方法、代码块、构造器内)</li></ul></li></ul><h3 id="1-15-异常"><a href="#1-15-异常" class="headerlink" title="1.15 异常"></a>1.15 异常</h3><ul><li><p>Error：JVM虚拟机无法解决的严重问题</p><ul><li>JVM系统内部错误、资源耗尽，如StackOverflow、OOM</li></ul></li><li><p>Exception：编程错误或者偶然的外在因素导致的一般性问题</p><ul><li>如空指针访问、数组越界、读取不存在的文件、网络连接中断</li></ul></li><li><p>java.lang.Throwable</p><ul><li>java.lang.Error：一般不编写针对性的代码进行处理。</li><li>java.lang.Exception：可以进行异常的处理<ul><li>编译时异常(checked)<ul><li>IOException</li><li>FileNotFoundException</li><li>ClassNotFoundException</li></ul></li><li>运行时异常(unchecked，RuntimeException)<ul><li>NullPointerException</li><li>ArrayIndexOutOfBoundsException</li><li>ClassCastException</li><li>NumberFormatException</li><li>InputMismatchException</li><li>ArithmeticException</li></ul></li></ul></li></ul></li><li><p><code>try{  }catch(XxxException e){  }catch(YyyException e){  }...finally{  }</code></p><ul><li>try-catch-finally语句可嵌套</li><li>try中的代码出现异常时，会生成一个异常类的对象，根据对象的类型在catch中匹配</li><li>常用的异常对象处理的方式：String  getMessage() 、void printStackTrace()</li><li>子类的异常处理要求在父类异常处理的前面</li><li>finally<ul><li>可不写</li><li>一旦写了，则声明的代码一定会执行，即使catch中又出现异常、或者try和catch中有return语句(finally中的代码在return之前执行)</li><li>JVM不能自动回收数据库连接、输入输出流、网络编程socket等资源，这些需要手动释放资源的操作应当写到finally中</li></ul></li><li>使用该语句处理异常相当于是把编译时异常变成运行时异常</li></ul></li><li><p><code>修饰符 返回值 方法名() throws XxxException, YyyException {  }</code></p><ul><li>方法体内出现的异常匹配throws声明的异常时，会将此异常类的对象抛出，后续代码不会执行</li><li>父类中被重写的方法没有throws方式处理异常，子类重写的方法也不能使用throws</li><li>执行一系列递进的方法时，建议只在最外层方法使用try-catch语句，内层方法使用throws</li></ul></li><li><p>手动抛出异常：<code>throw new XxxException();</code></p></li><li><p>自定义异常类</p><ul><li>继承于现有的异常结构：RuntimeException、Exception等</li><li>提供全局常量：serialVersionUID</li><li>提供重载的构造器</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写的乱七八糟</title>
    <link href="/2020/06/06/%E5%86%99%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    <url>/2020/06/06/%E5%86%99%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h2><h3 id="06-06"><a href="#06-06" class="headerlink" title="06.06"></a>06.06</h3><ul><li><p>今天离考研还有196天，答辩完之后就没好好的复习过，花了一天时间改论文，玩游戏看电影又过了一天，花了一天尝试换成OC引导，失败了，又用了半天想自己仿冒声卡驱动，也没成，最后半天重新搭起了这个博客准备用来记录我的复习过程。坚持从来就不是一件容易的事，尤其是我的自制力还很差，但是既然选择了去考研而且还是跨考，就一定要强迫自己努力，在剩下的不多的时间里，尽可能的不浪费，因为，这一件事上我不能再失败了。</p></li><li><p>今天又花了一些时间配置了一些可能会用到的软件，学习时间只有五个半小时，看了高数基础班视频第五讲全部，包括三点（极值点、拐点、最值点）两性（单调性、凹凸性）一线（渐近线），和函数作图；第六讲大部分，主要包括介值定理、平均值定理、零点定理、费马定理、罗尔定理和积分中值定理。明天看完第六讲把五六讲例题做了，再去做第四讲的习题作为复习，应该要花很长时间，但是没办法基础知识多花点时间是有必要的。</p></li></ul><h3 id="06-07"><a href="#06-07" class="headerlink" title="06.07"></a>06.07</h3><ul><li><p>距离考研还有195天，今天看完了第六讲的基础班的视频，包括拉格朗日中值定理、柯西定理，泰勒公式，麦克劳林公式。接着回过去做第五六讲的例题，但是做题速度太慢了，而且有的即使是听过的题也不知道怎么做，有的简单的题想太复杂，又不知如何下手了。主要问题在于听课的时候没有及时吸收的内容，之后也没去复习总结。一次听太多内容，能记住的实在不多，老是想着通过以后做题来加强记忆。我的想法就是第一天听课做例题，第二天做习题，相当于分开两次来记忆，我不知道这样做与一次性听课做例题做习题相比是更好还是更差。在做完计划的习题后大概地把四五六讲的课本知识回顾了一下，根据前面做题的感受，这点还是有必要的，然后发现第七讲的视频时长不多，也就顺便看完了，内容也不多，明天就把五六七讲没做的题都做完吧。</p></li><li><p>今天找了一个计时软件，定了一个600分钟的目标，也就是10个小时的学习时间，到现在还剩下42分钟，没有完成目标，主要是下午偷了一会懒，还有临时处理了一下毕设的打印材料。一天下来看视频课的时候总共有20分钟在听数学故事吧哈哈，那样算来学习时间就是9个小时了。不知道10个小时强度算不算很高，比起高中时的时间应该差一些吧。但是毕竟今天的9个小时都是在学高数，而且一下子接受的内容比较多，这点上比高中的时候会难一点。</p></li></ul><p><img src="/images/0607_timer.png" srcset="/img/loading.gif" alt=""></p><h3 id="06-08"><a href="#06-08" class="headerlink" title="06.08"></a>06.08</h3><ul><li>距离考研还有194天，昨晚睡觉的时候右耳突然严重耳鸣，直到早上醒来也没有恢复，不知道是不是给自己压力太大休息不好导致的，这情况实在让人很灰心。</li><li>刚学习90分钟，把第五讲的习题做完并订正了，有两个计算错误，其他都没问题。担心耳鸣的情况，打算休息10分钟。</li><li>又过了80分钟，第六讲的习题也解决了，做题速度还是太慢了，准确率还可以，不过这只是基础班的内容，不知道后面难度增加后的情况如何。休息了一会，感觉耳鸣的情况好些了，可能是习惯了，中午出到门口走了一会。阴天的风吹着还挺舒服，而且外面不那么安静的环境我都感觉不到耳鸣了，瞬间心情就好多了，也感觉很有必要每天运动一下，我真的是太长时间没有运动了，要是考研途中身体吃不消就太亏了，这段时间天气都不太好，经常下雨，不过只要地面干燥的话还是早上吃早餐之前出门在附近跑几圈把。</li><li>今天下午基本没有学习的时间，中午洗了碗回到房间没多久就快两点了，然后毕设老师又发来任务整理毕设材料，处理完发给老师后就出去理发了，回来后又收到任务说要p一个毕业照，翻了翻相册就基本没几张自己的照片，于是只能找了张跟舍友的合照把自己扣出来了。好不容易准备做题了，半个小时不到隔壁又开始在钻什么东西，声音实在是太大而且一阵一阵的，完全没法安心做题，看视频声音也会被盖过去，到现在过了快一个小时了还没弄完，看来今天的目标又要完成不了了。在家准备考研就是有这点不好，环境很不稳定，而且又是在乡下，附近老人们聊天孩子们玩耍声音都会比较大，隔壁的房子也还没装修好，不知道以后还有多少不稳定因素，现在看来还是得抓住尽可能多的时间，要是太多次达不到目标，那么定这个目标就没有意义了。</li><li>今天原本设立目标是480分钟也就是8小时，剩下180分钟没完成，也就是只学习了5个小时的样子，今天真的是各种事不断影响，希望明天能够顺顺利利的吧。</li></ul><p><img src="/images/0608_timer.png" srcset="/img/loading.gif" alt=""></p><h3 id="06-09"><a href="#06-09" class="headerlink" title="06.09"></a>06.09</h3><ul><li>考研倒计时第193天，早上六点半起来出门跑了一圈就喘大气了，确实太久没运动了，好歹也是跑了，坚持！</li><li>今天成功达成480分钟的目标，但是下午的学习效率实在是很低，可能是因为刚开始复习积分的内容，一下子消化不来，好多题目都得看答案，一直做不出就会有点厌烦，然后又不想做了，不知道是不是可以尝试这个时候看看专业课的内容，毕竟我目前还没怎么看。不管怎么说，难就是难，终归是要调整好心态去解决的，不然遇到困难就退缩那还考个锤子！今天看到有人在微博分享无水印的pdf，但是每天只分享一个而且每次只分享一天，毕竟我还是不爱逛微博，很容易忘掉去看看，准备明天写个爬虫试试。</li></ul><p><img src="/images/0609_timer.png" srcset="/img/loading.gif" alt=""></p><h3 id="06-10"><a href="#06-10" class="headerlink" title="06.10"></a>06.10</h3><ul><li><p>考研倒计时第192天，今天本来觉得状态挺好的，结果花了好多时间去找无水印的资料，看来我真的是很抠门的强迫症患者/haha，又不舍花钱，又不愿意将就着用。好在也是找到了一些，基础30讲的质量很不错，完全可以用下去了，但是36讲的虽然也找到了，质量却不高，有的字有些糊。暂时用不上，以后再看看能不能找到质量更好的。</p></li><li><p>今天的480分钟目标没有完成，甚至差的有点远，而且一天下来也只是把昨天剩下的几十个一元积分的例题做完，但是基本是看着答案做的，很多题都没有思路，以后还得多做。</p></li></ul><p><img src="/images/0610_timer.png" srcset="/img/loading.gif" alt=""></p><h3 id="06-11"><a href="#06-11" class="headerlink" title="06.11"></a>06.11</h3><ul><li>考研倒计时191天，今天本来进行的挺顺利的，结果顺风就浪，想休息一下，床上一趟手机一拿，然后一发不可收拾，又比目标差了两小时，明天开始准备调整一下时间安排，尽量在上午做题，下午看视频学习或者接着做题，晚上视情况而定。今天找到质量还可以的36讲的电子档，然后自己一个一个把18讲的水印去掉了，但是照我这么不认真不专注，天知道什么时候才能用得上了。明天还有重修课要上，后天还有考前辅导课，这两个礼拜还得写论文，复习考试，所以不能再随意浪费时间了，再不紧张起来真就没必要去考了。</li></ul><p><img src="/images/0611_timer.png" srcset="/img/loading.gif" alt=""></p><h3 id="06-12"><a href="#06-12" class="headerlink" title="06.12"></a>06.12</h3><ul><li>考研倒计时190天，今天做完第十讲的例题后就开始整理之前的这些高数上的内容，因为之前换了无水印的pdf正好也重新记一下笔记。可能主要是做这个不怎么耗费脑力，所以也上午下午基本没停，甚至于吃晚饭前就快完成今天的目标了，完成之后还多了两小时，整理的好处就是能够对前面的知识进行回顾，还有一些思考，加深印象。不好的地方就是看着贴了半墙壁的没记熟的公式心里发慌，想到还有很多要学的内容就觉得可能会很吃力，但是我相信最难熬的开始，过去了就会顺利很多，所以一定要坚持住。今天也顺便把线代9讲的水印去掉了，明天有考前辅导课，只能是学一部分内容，考试还是要花点时间去复习的，毕竟还是要先毕了业才好。昨天应该更新了神盾局，现在10点钟，刚好能去看咯。</li></ul><p><img src="/images/0612_timer.png" srcset="/img/loading.gif" alt=""></p><h3 id="06-13"><a href="#06-13" class="headerlink" title="06.13"></a>06.13</h3><ul><li>考研倒计时189天，今天复习时间比较短，做了第七八讲的习题，还没做完。下午听辅导课一个小时多，解释考试安排又花了近一个小时，要求真麻烦，搞得心情有点糟，休息了一下去找了一些论文的材料，晚上也没有学习，填完毕业生登记表就比较早的睡了。</li></ul><h3 id="06-14"><a href="#06-14" class="headerlink" title="06.14"></a>06.14</h3><ul><li>考研倒计时188天，今天又一次没完成目标，上午把第九、十讲的习题做了。中午吃完饭开始处理论文，完成之后感觉太累就去躺了一会，晚上把第十一讲的视频看完了，第十二讲也看了一部分。</li></ul><h3 id="06-15"><a href="#06-15" class="headerlink" title="06.15"></a>06.15</h3><ul><li>考研倒计时187天，今天的目标达成了，主要学习了第十二十三讲的视频内容，做了十一十二讲的例题，明天把十三讲微分方程的例题做完看时间准备复习后天的考试，考过了就能顺利毕业了，加油💪。</li></ul><p><img src="/images/0615_timer.png" srcset="/img/loading.gif" alt=""></p><h3 id="06-16"><a href="#06-16" class="headerlink" title="06.16"></a>06.16</h3><ul><li>考研倒计时186天，今天本来做着微分方程的例题好好的，结果说论文内容不对要重写，突然搞得心态有点炸，本来打算做完就去复习考试内容的，这样一来计划就乱了，于是赶紧去找资料尽快把论文搞定。尽管中间基本没停过也还是到下午两三点才完成，好在这回没什么问题直接通过了，下午和晚上看了一遍复习pdf涉及到的全部内容做了一些书上的课后题，还整理了一般的笔记，剩下的明天起来再写，然后就考试了。</li></ul><h3 id="06-17"><a href="#06-17" class="headerlink" title="06.17"></a>06.17</h3><ul><li>考研倒计时185天，昨晚不知道怎么的睡不着觉，最近心态有点不稳定，对考研各种担心，后悔不直接去上班还能赚点小钱，能买想买的东西，还不用数学这么难，不用背政治。唉，知难而退，没点坚持，考研对我来说是一种磨练，强迫自己走出舒适圈，去努力去克服困难，所以千万不能低头！</li><li>考完后下午睡了一个小时，真的好难得居然睡着了，看来是这几天真的累了，考完了大学生涯最后一门考试，也是放松了，能毕业了。</li></ul><h3 id="06-20"><a href="#06-20" class="headerlink" title="06.20"></a>06.20</h3><ul><li><p>有一两天没有写记录了，不是没在学习，虽然没在学考研的内容了，临近毕业没想到遇到的烦心事这么多，但仔细想来这些烦心的事都是原来的自己做的不好才导致的，高额的重修费，推迟的双证，学校狠狠的给了我两巴掌，让我又一次看清伪装的自己，人啊，最懂自己的是自己，最大的敌人是自己，最爱的人是自己，最讨厌的人也是自己，现在过的好与坏都是过去的自己造就的，不顾后果的放纵，人的七宗罪傲慢，嫉妒，暴怒，懒惰，贪婪，暴食，色欲，我几乎深刻体验了有一半，甚至深受其所害。回顾自己的大学生涯，一再的挂科，厌学，自己怎么可能没有意识到过呢，又何尝没想过要改呢，结果呢，一次又一次的放弃。总是以各种借口来安慰自己，实在可笑，却很满足，这一次我不过是拿考研来拖延半年多的时间来逃避工作，逃避责任，有一段时间我一直在想去上班比现在考研好多了，可是自己根本没找工作的本事，寄希望于培训班，又是一大笔支出，还不能保证自己能过的好，看到贴的一大堆数学公式，我想到，既然我能用三个礼拜过完一遍高数基础班，那我又如何不能拿考研的目标转变成学完一套培训班的内容呢，花与准备考研同样的时间去学习一套技术，又何尝不可呢，考研没考上还不说，考上了也是学这些理论出去实习还要受到导师的约束，三年之后出来我又能赚到多少钱，我在学校又能坚持多久，我还能接受校园内的各种我不想接受的内容吗？一个人想要有多成功，跟他的欲望也有很大的关系，这三个礼拜的学习过程中，我能感受到对赚钱的欲望有多么强烈，只是，唉，在我又遇到困难时我又会如何想呢，有选择逃避说要去考研吗。我最大的毛病之一就是做事要做很多准备，没做好准备就觉得没把握，就回去逃避，而往往连准备都没完全就遇到困难撤退了，我都不知道有人劝我的时候我关心过吗，我得到过身边人的提醒，我却从来没有真正听进去，沉浸在自己的世界里，如今又不敢去面对他们，不敢提起自己有多么的懦弱，无能。</p></li><li><p>可悲。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
